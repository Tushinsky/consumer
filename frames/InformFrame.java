/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import abonentgaz.*;
import dao_impl.*;
import entities.*;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumnModel;
import runqueries.Runquery;

/**
 *
 * @author Сергей
 */
public class InformFrame extends javax.swing.JInternalFrame {
    
    private int idCompany;// идентификатор (код) компании
    private JList lstMinistry;
    private JList lstStateDogovor;
    private JScrollPane ministryPane;
    private JScrollPane statePane;
    private int tabselIndex;// номер выбранной вкладки
    private String dbTableName;// имя таблицы базы данных для операций обновления и др
    private MyPopupMenu recordMenu;
    private Ministry entMinistry;// министерство
    private Agreementstate entAgreement;// состояние договора
    private Phone entPhone;// телефоны
    private Email entEmail;// адрес электронной почты
    private ColumnModelListener LimitcolumnListener;
    private ColumnModelListener FlowcolumnListener;
    private ColumnModelListener ObjectcolumnListener;
    private ColumnModelListener LettercolumnListener;
    private ColumnModelListener BookcolumnListener;
    private ColumnModelListener JournalcolumnListener;
    private ColumnModelListener OthercolumnListener;
    private ColumnModelListener BankcolumnListener;
    private ColumnModelListener WarningcolumnListener;
    private final UserProperties props = new UserProperties("informframe.properties");
    private final TableProperty tprops = new TableProperty();// класс для установки размеров столбцов таблиц
    private BankDaoImpl bankDao;
    private BookDaoImpl bookDao;
    private LimitDaoImpl limitDao;
    private FlowDaoImpl flowDao;
    private ObjectsDaoImpl objectsDao;
    private JournalDaoImpl journalDao;
    private LetterDaoImpl letterDao;
    private TableDaoImpl otherDao;
    private WarningDaoImpl warningDao;
    
    /**
     * Creates new form InformFrame
     */
    public InformFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        btnAddRecord = new javax.swing.JButton();
        btnDeleteRecord = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtMail = new javax.swing.JTextField();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblCommentItem = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        txtMinistry = new javax.swing.JTextField();
        txtDogovor = new javax.swing.JTextField();
        btnMinistry = new javax.swing.JButton();
        btnStateDogovor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBankItem = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLimit = new javax.swing.JTable();
        lblCommonLimit = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cmbYear = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFlowItem = new javax.swing.JTable();
        lblCommonFlow = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblObjects = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblLetter = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblBook = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblJournal = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblOtherItem = new javax.swing.JTable();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Информация");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/CommentHS.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setRollover(true);

        btnAddRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NewDocumentHS.png"))); // NOI18N
        btnAddRecord.setToolTipText("добавить запись");
        btnAddRecord.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddRecord.setFocusable(false);
        btnAddRecord.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAddRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddRecord);

        btnDeleteRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/DeleteHS.png"))); // NOI18N
        btnDeleteRecord.setToolTipText("удалить запись");
        btnDeleteRecord.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteRecord.setFocusable(false);
        btnDeleteRecord.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDeleteRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteRecord);

        jSplitPane1.setDividerLocation(550);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        jSplitPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSplitPane1PropertyChange(evt);
            }
        });

        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel4.setText("Министерство");

        jLabel5.setText("Договор");

        lblPhone.setText("Телефон");
        lblPhone.setToolTipText("двойной клик для добавления записи");
        lblPhone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPhoneMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblPhoneMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblPhoneMouseReleased(evt);
            }
        });

        txtPhone.setText("jTextField2");
        txtPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPhoneKeyPressed(evt);
            }
        });

        lblEmail.setText("E-mail");
        lblEmail.setToolTipText("двойной клик для добавления записи");
        lblEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEmailMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblEmailMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblEmailMouseReleased(evt);
            }
        });

        txtMail.setEditable(false);
        txtMail.setText("jTextField3");
        txtMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMailKeyPressed(evt);
            }
        });

        tblCommentItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblCommentItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Заголовок 1", "Заголовок 2", "Заголовок 3"
            }
        ));
        tblCommentItem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblCommentItem.setCellSelectionEnabled(true);
        tblCommentItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tblCommentItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblCommentItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblCommentItemMouseReleased(evt);
            }
        });
        tblCommentItem.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblCommentItemPropertyChange(evt);
            }
        });
        tblCommentItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblCommentItemKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(tblCommentItem);

        jLabel9.setText("Замечание");

        txtMinistry.setEditable(false);
        txtMinistry.setText("jTextField2");

        txtDogovor.setEditable(false);
        txtDogovor.setText("jTextField3");

        btnMinistry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow_2_down_round.png"))); // NOI18N
        btnMinistry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinistryActionPerformed(evt);
            }
        });

        btnStateDogovor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow_2_down_round.png"))); // NOI18N
        btnStateDogovor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStateDogovorActionPerformed(evt);
            }
        });

        jLabel1.setText("Банк");

        tblBankItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblBankItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Заголовок 1", "Заголовок 2", "Заголовок 3"
            }
        ));
        tblBankItem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBankItem.setCellSelectionEnabled(true);
        tblBankItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tblBankItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblBankItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblBankItemMouseReleased(evt);
            }
        });
        tblBankItem.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblBankItemPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(tblBankItem);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblPhone)
                        .addGap(18, 18, 18)
                        .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblEmail)
                        .addGap(34, 34, 34)
                        .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtDogovor, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                            .addComponent(txtMinistry))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(btnStateDogovor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMinistry, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel9))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMinistry)
                    .addComponent(btnMinistry, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDogovor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStateDogovor, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        tblLimit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblLimit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Заголовок 1", "Заголовок 2", "Заголовок 3"
            }
        ));
        tblLimit.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblLimit.setCellSelectionEnabled(true);
        tblLimit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblLimit.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblLimit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblLimitMouseReleased(evt);
            }
        });
        tblLimit.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tblLimitInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        tblLimit.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblLimitPropertyChange(evt);
            }
        });
        tblLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblLimitKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblLimit);
        tblLimit.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        lblCommonLimit.setBackground(new java.awt.Color(255, 255, 255));
        lblCommonLimit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblCommonLimit.setText("Всего:");
        lblCommonLimit.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblCommonLimit.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCommonLimit, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCommonLimit)
                .addGap(9, 9, 9))
        );

        jTabbedPane2.addTab("Лимиты", jPanel3);

        cmbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearActionPerformed(evt);
            }
        });

        jLabel2.setText("Год");

        tblFlowItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblFlowItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Заголовок 1", "Заголовок 2", "Заголовок 3", "Заголовок 4", "Заголовок 5", "Заголовок 6"
            }
        ));
        tblFlowItem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblFlowItem.setCellSelectionEnabled(true);
        tblFlowItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblFlowItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblFlowItemMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblFlowItemMousePressed(evt);
            }
        });
        tblFlowItem.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblFlowItemPropertyChange(evt);
            }
        });
        tblFlowItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblFlowItemKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblFlowItem);

        lblCommonFlow.setBackground(new java.awt.Color(255, 255, 255));
        lblCommonFlow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblCommonFlow.setText("Всего:");
        lblCommonFlow.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblCommonFlow.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
            .addComponent(lblCommonFlow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCommonFlow)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Потребление", jPanel1);

        tblObjects.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblObjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Заголовок 5", "Заголовок 6", "Заголовок 7", "Заголовок 8", "Заголовок 9"
            }
        ));
        tblObjects.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblObjects.setCellSelectionEnabled(true);
        tblObjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblObjects.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblObjectsPropertyChange(evt);
            }
        });
        jScrollPane8.setViewportView(tblObjects);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("Объекты", jPanel5);

        tblLetter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblLetter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblLetter.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblLetter.setCellSelectionEnabled(true);
        tblLetter.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblLetter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblLetterMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblLetterMouseReleased(evt);
            }
        });
        tblLetter.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblLetterPropertyChange(evt);
            }
        });
        jScrollPane5.setViewportView(tblLetter);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("Письма", jPanel4);

        tblBook.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Заголовок 1", "Заголовок 2", "Заголовок 3"
            }
        ));
        tblBook.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBook.setCellSelectionEnabled(true);
        tblBook.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblBookMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblBookMouseReleased(evt);
            }
        });
        tblBook.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblBookPropertyChange(evt);
            }
        });
        jScrollPane6.setViewportView(tblBook);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Книга", jPanel6);

        tblJournal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblJournal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        tblJournal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblJournal.setCellSelectionEnabled(true);
        tblJournal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblJournal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblJournalMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblJournalMouseReleased(evt);
            }
        });
        tblJournal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblJournalPropertyChange(evt);
            }
        });
        jScrollPane7.setViewportView(tblJournal);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Журнал", jPanel7);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Реквизиты");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setText("Уведомления");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton6);
        jRadioButton6.setText("Договор");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        tblOtherItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblOtherItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "A", "B", "C", "D", "Заголовок 5", "Заголовок 6", "Заголовок 7"
            }
        ));
        tblOtherItem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblOtherItem.setCellSelectionEnabled(true);
        tblOtherItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblOtherItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblOtherItemMouseReleased(evt);
            }
        });
        tblOtherItem.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblOtherItemPropertyChange(evt);
            }
        });
        tblOtherItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblOtherItemKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tblOtherItem);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton6)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Прочее", jPanel8);

        jSplitPane1.setLeftComponent(jTabbedPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            tabselIndex = 0;
            jTabbedPane2.setSelectedIndex(0);// выбираем первую вкладку
            jRadioButton1.setSelected(true);
            dbTableName = "LIMIT";// устанавливаем начальное имя таблицы базы данных
            // создаём экземляр класса для считывания и записи ширины столбцов таблиц
            

//            System.out.println("formShow void");
        } catch (Exception ex) {
            Logger.getLogger(InformFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void btnMinistryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinistryActionPerformed
        // создаём список министерств с заданной моделью
        ministryPane.setSize(txtMinistry.getWidth(), 
                        txtMinistry.getHeight() * 7);
        ministryPane.setVisible(!ministryPane.isVisible());
    }//GEN-LAST:event_btnMinistryActionPerformed

    private void btnStateDogovorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStateDogovorActionPerformed
        // TODO add your handling code here:
//        lstStateDogovor.setLocation(txtDogovor.getLocation().x, 
//                txtDogovor.getLocation().y + txtDogovor.getHeight() +3);
        statePane.setSize(txtDogovor.getWidth(), 
                        txtDogovor.getHeight() * 2);
        statePane.setVisible(!statePane.isVisible());
    }//GEN-LAST:event_btnStateDogovorActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void lblPhoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhoneMouseClicked
        // при двойном щелчке по метке запрашиваем пользователя о добавлении
        // номера телефона, если его нет; если телефон есть, то показываем
        // форму для редактирования существующих записей
        if(evt.getClickCount() == 2 && txtPhone.getText().equals("")){
            // был двойной щелчок по метке и в поле номеров нет данных
            addNumber("PHONE", txtPhone);
        }
    }//GEN-LAST:event_lblPhoneMouseClicked

    private void txtPhoneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhoneKeyPressed
        // при нажатии клавиши ввода (энтер) обновляем запись в базе данных
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            // изменяем вид курсора на часы
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            // обновляем данные
            entPhone.setPhone(txtPhone.getText());
            // возвращаем вид курсора в прежний вид
            setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_txtPhoneKeyPressed

    private void txtPhoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhoneFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneFocusLost

    private void txtMailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMailKeyPressed
        // при нажатии клавиши ввода (энтер) обновляем запись в базе данных
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            // изменяем вид курсора на часы
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            // обновляем данные
            entEmail.setMail(txtMail.getText());
            // возвращаем вид курсора в прежний вид
            setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_txtMailKeyPressed

    private void lblEmailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEmailMouseClicked
        // при двойном щелчке по метке запрашиваем пользователя о добавлении
        // адреса почты, если его нет; если адрес есть, то показываем
        // форму для редактирования существующих записей
        if(evt.getClickCount() == 2 && txtMail.isEditable() == false){
            addNumber("EMAIL", txtMail);
        }
    }//GEN-LAST:event_lblEmailMouseClicked

    private void tblCommentItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCommentItemKeyPressed
        // при наличии записей в таблице, если пользователь
        // находится на последней строке и нажимает стрелку вниз для перемещения
        // по таблице, то запрашиваем его о добавлении новой записи
        if(evt.getKeyCode() == KeyEvent.VK_DOWN && 
                tblCommentItem.getSelectedRow() == 
                (tblCommentItem.getRowCount() - 1)){
            addNewRecord();
        }
    }//GEN-LAST:event_tblCommentItemKeyPressed

    private void tblBankItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBankItemMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if(evt.isPopupTrigger()){
            // проверяем, есть ли редактируемая строка
            if(tblBankItem.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(bankDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblBankItemMouseReleased

    private void tblCommentItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCommentItemMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if(evt.isPopupTrigger()) 
            // проверяем, есть ли редактируемая строка
            if(tblCommentItem.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(warningDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
    }//GEN-LAST:event_tblCommentItemMouseReleased

    private void btnAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRecordActionPerformed
        // добавление новой записи
        addNewRecord();
    }//GEN-LAST:event_btnAddRecordActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        // удаление существующей записи
        deleteThisRecord();
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    private void jSplitPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSplitPane1PropertyChange
        // при изменении свойства dividerLocation сохраняем его значение в файле свойств
        if(evt.getPropertyName().equals("dividerLocation")){
            // класс для чтения свойств
            SplitLayoutManager slManager = new 
                    SplitLayoutManager("informframe.properties");
            // передаём ему разделитель, для которого нужно изменить положение
            slManager.setKeyName("divider");
            slManager.setLocation(jSplitPane1.getDividerLocation());
        }
    }//GEN-LAST:event_jSplitPane1PropertyChange

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
//        System.out.println("formInternalOpened void");
        try {
            // задаём расположение разделителя
            SplitLayoutManager slManager = new 
                    SplitLayoutManager("informframe.properties", "divider");
            int location = slManager.getLocation();
            if(location != 0) 
                jSplitPane1.setDividerLocation(location);
            
            // заполняем списки
            addListItem();
            
            // создаём всплывающее меню для работы с таблицами
            recordMenu = new MyPopupMenu() {

                @Override
                public void addRecord() {
                    addNewRecord();
                }

                @Override
                public void deleteRecord() {
                    deleteThisRecord();
                }

                @Override
                public void xlsExport() {
                    exportToXLSFile();
                }

                @Override
                public void odsExport() {
                    exportToODSFile();
                }

                @Override
                public void csvExport() {
                    exportToCSVFile();
                }
            };
            // и добавляем его на форму
            add(recordMenu);
            
            // назначаем классы - рисовальщики для первого столбца таблиц
            TableCell_Renderer.setIntegerTableCellRenderer(tblBankItem, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblBook, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblCommentItem, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblFlowItem, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblJournal, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblLetter, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblLimit, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblObjects, null);
            TableCell_Renderer.setIntegerTableCellRenderer(tblOtherItem, null);
            
            // назначаем классы - рисовальщики для столбцов с логическими данными
            TableCell_Renderer.setBooleanTablecellRenderer(tblObjects);
            
            // назначаем слушателей для контроля за доступом к первому столбцу таблиц
            MDIObject.addColumnSelectionListener(tblBankItem);
            MDIObject.addColumnSelectionListener(tblBook);
            MDIObject.addColumnSelectionListener(tblCommentItem);
            MDIObject.addColumnSelectionListener(tblFlowItem);
            MDIObject.addColumnSelectionListener(tblJournal);
            MDIObject.addColumnSelectionListener(tblLetter);
            MDIObject.addColumnSelectionListener(tblLimit);
            MDIObject.addColumnSelectionListener(tblObjects);
            MDIObject.addColumnSelectionListener(tblOtherItem);
            
            // добавляем слушателей моделей столбцов таблиц
            setColumnListener();
        } catch (SQLException ex) {
            Logger.getLogger(InformFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
//        System.out.println("formInternalFrameClosing");
    }//GEN-LAST:event_formInternalFrameClosing

    private void tblBankItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBankItemMousePressed
        // при щелчке мыши по таблице задаём имя таблицы
        // базы данных для операций обновления
        dbTableName = "BANK";
        // выделяем строку в таблице, на которой выполнен щелчок мыши
        
    }//GEN-LAST:event_tblBankItemMousePressed

    private void tblCommentItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCommentItemMousePressed
        // при щелчке мыши по таблице задаём имя таблицы
        // базы данных для операций обновления
        dbTableName = "WARNING";
//        System.out.println(dbTableName);
    }//GEN-LAST:event_tblCommentItemMousePressed

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        // в зависимости от выбранной вкладки задаём имя таблицы базы данных
        // для операций обновления
        
        if (jTabbedPane2.getSelectedIndex() != 6) {
            tabselIndex = jTabbedPane2.getSelectedIndex();
        } else {
            // проверяем, какой переключатель выбран, и получаем соответствующую
            // информацию
            if(jRadioButton1.isSelected()){
                jRadioButton1.doClick();// реквизиты
            } else if(jRadioButton5.isSelected()){
                jRadioButton5.doClick();// уведомления
            } else {
                jRadioButton6.doClick();// договора
            }
        }
//        System.out.println(dbTableName);
//        tabselIndex = jTabbedPane2.getSelectedIndex();// номер вкладки
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
        tabselIndex = 8;
        dbTableName = "AGREEMENT";
        getOtherInform();// договор
        OthercolumnListener = new ColumnModelListener(tblOtherItem, props, 
                "tblagreementwidth");
        tblOtherItem.getColumnModel().addColumnModelListener(OthercolumnListener);
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        // TODO add your handling code here:
        tabselIndex = 7;
        dbTableName = "UVEDOMLENIE";
        getOtherInform();// уведомление
        OthercolumnListener = new ColumnModelListener(tblOtherItem, props, 
                "tbluvedomleniewidth");
        tblOtherItem.getColumnModel().addColumnModelListener(OthercolumnListener);
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        tabselIndex = 6;
        dbTableName = "REGISTRATION";
        getOtherInform();// регистрация
        OthercolumnListener = new ColumnModelListener(tblOtherItem, props, 
                "tblregistrationwidth");
        tblOtherItem.getColumnModel().addColumnModelListener(OthercolumnListener);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void tblOtherItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblOtherItemKeyPressed
        // при наличии записей в таблице, если пользователь
        // находится на последней строке и нажимает стрелку вниз для перемещения
        // по таблице, то запрашиваем его о добавлении новой записи
        if (evt.getKeyCode() == KeyEvent.VK_DOWN
                && tblOtherItem.getSelectedRow()
                == (tblOtherItem.getRowCount() - 1)) {
            addNewRecord();
        }
    }//GEN-LAST:event_tblOtherItemKeyPressed

    private void tblOtherItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOtherItemMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if (evt.isPopupTrigger()) {
            // проверяем, есть ли редактируемая строка
            if(tblOtherItem.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(otherDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblOtherItemMouseReleased

    private void tblFlowItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblFlowItemKeyPressed
        // при наличии записей в таблице, если пользователь
        // находится на последней строке и нажимает стрелку вниз для перемещения
        // по таблице, то запрашиваем его о добавлении новой записи
        if (evt.getKeyCode() == KeyEvent.VK_DOWN && tblFlowItem.getSelectedRow()
                == (tblFlowItem.getRowCount() - 1)) {
            addNewRecord();
        }
    }//GEN-LAST:event_tblFlowItemKeyPressed

    private void tblFlowItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFlowItemMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if (evt.isPopupTrigger()) {
            // проверяем, есть ли редактируемая строка
            if(tblFlowItem.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(flowDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblFlowItemMouseReleased

    private void cmbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearActionPerformed
        // при выборе элемента из списка задаём фильтр записей по выбранному году
        // заполняем таблицу данными запроса
        getFlow(cmbYear.getSelectedIndex());
    }//GEN-LAST:event_cmbYearActionPerformed

    private void tblLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblLimitKeyPressed
        // при наличии записей в таблице, если пользователь
        // находится на последней строке и нажимает стрелку вниз для перемещения
        // по таблице, то запрашиваем его о добавлении новой записи
        if (evt.getKeyCode() == KeyEvent.VK_DOWN && tblLimit.getSelectedRow()
                == (tblLimit.getRowCount() - 1)) {
            addNewRecord();
        }
    }//GEN-LAST:event_tblLimitKeyPressed

    private void tblLimitPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblLimitPropertyChange
        // TODO add your handling code here:
//        System.out.println("tblLimitPropertyChange-" + evt.getPropertyName());
        // при смене модели удаляем слушетель модели столбцов, чтобы не
        // происходила запись размеров столбцов таблицы в файл свойств при их установке
        if(evt.getPropertyName().equals("model"))
            tblLimit.getColumnModel().removeColumnModelListener(LimitcolumnListener);
    }//GEN-LAST:event_tblLimitPropertyChange

    private void tblLimitInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tblLimitInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tblLimitInputMethodTextChanged

    private void tblLimitMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLimitMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if (evt.isPopupTrigger()) {
            // проверяем, есть ли редактируемая строка
            if(tblLimit.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(limitDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblLimitMouseReleased

    private void tblFlowItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFlowItemMousePressed
        // TODO add your handling code here:
        dbTableName = "FLOW";
    }//GEN-LAST:event_tblFlowItemMousePressed

    private void tblLetterMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLetterMousePressed
        // TODO add your handling code here:
        dbTableName = "LETTER";
    }//GEN-LAST:event_tblLetterMousePressed

    private void tblLetterMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLetterMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            // проверяем, есть ли редактируемая строка
            if(tblLetter.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(letterDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblLetterMouseReleased

    private void tblBookMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookMousePressed
        // TODO add your handling code here:
        dbTableName = "BOOK";
    }//GEN-LAST:event_tblBookMousePressed

    private void tblBookMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            // проверяем, есть ли редактируемая строка
            if(tblBook.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(bookDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblBookMouseReleased

    private void tblJournalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblJournalMousePressed
        // TODO add your handling code here:
        dbTableName = "JOURNAL";
    }//GEN-LAST:event_tblJournalMousePressed

    private void tblJournalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblJournalMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            // проверяем, есть ли редактируемая строка
            if(tblJournal.getSelectedRowCount() > 0){
                // устанавливаем доступность пункта меню Удалить
                if(journalDao.getCount() == 0){
                    recordMenu.getComponent(1).setEnabled(false);
                } else {
                    recordMenu.getComponent(1).setEnabled(true);
                }
                recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_tblJournalMouseReleased

    private void tblFlowItemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblFlowItemPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblFlowItem.getColumnModel().removeColumnModelListener(FlowcolumnListener);
    }//GEN-LAST:event_tblFlowItemPropertyChange

    private void tblObjectsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblObjectsPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblObjects.getColumnModel().removeColumnModelListener(ObjectcolumnListener);
    }//GEN-LAST:event_tblObjectsPropertyChange

    private void tblLetterPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblLetterPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblLetter.getColumnModel().removeColumnModelListener(LettercolumnListener);
    }//GEN-LAST:event_tblLetterPropertyChange

    private void tblBookPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblBookPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblBook.getColumnModel().removeColumnModelListener(BookcolumnListener);
    }//GEN-LAST:event_tblBookPropertyChange

    private void tblJournalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblJournalPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblJournal.getColumnModel().removeColumnModelListener(JournalcolumnListener);
    }//GEN-LAST:event_tblJournalPropertyChange

    private void tblOtherItemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblOtherItemPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblOtherItem.getColumnModel().removeColumnModelListener(OthercolumnListener);
    }//GEN-LAST:event_tblOtherItemPropertyChange

    private void tblBankItemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblBankItemPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblBankItem.getColumnModel().removeColumnModelListener(BankcolumnListener);
    }//GEN-LAST:event_tblBankItemPropertyChange

    private void tblCommentItemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCommentItemPropertyChange
        // при смене модели удаляем слушателя модели столбцов
        if(evt.getPropertyName().equals("model"))
            tblCommentItem.getColumnModel().removeColumnModelListener(WarningcolumnListener);
    }//GEN-LAST:event_tblCommentItemPropertyChange

    private void lblPhoneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhoneMousePressed
        // задаём имя таблицы для операции добавления, удаления записи
        dbTableName = "PHONE";
    }//GEN-LAST:event_lblPhoneMousePressed

    private void lblPhoneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhoneMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if(evt.isPopupTrigger()){
            recordMenu.getComponent(1).setEnabled(false);// блокируем пункт Удалить
            recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        
    }//GEN-LAST:event_lblPhoneMouseReleased

    private void lblEmailMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEmailMousePressed
        // задаём имя таблицы для операции добавления, удаления записи
        dbTableName = "EMAIL";
    }//GEN-LAST:event_lblEmailMousePressed

    private void lblEmailMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEmailMouseReleased
        // при нажатии правой кнопки мыши выводим всплывающее меню
        // для выбора действий с таблицами
        if(evt.isPopupTrigger()){
            // проверяем возможность редактирования
            recordMenu.getComponent(1).setEnabled(false);// блокируем пункт Удалить
            recordMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            
        }
    }//GEN-LAST:event_lblEmailMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRecord;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnMinistry;
    private javax.swing.JButton btnStateDogovor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblCommonFlow;
    private javax.swing.JLabel lblCommonLimit;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JTable tblBankItem;
    private javax.swing.JTable tblBook;
    private javax.swing.JTable tblCommentItem;
    private javax.swing.JTable tblFlowItem;
    private javax.swing.JTable tblJournal;
    private javax.swing.JTable tblLetter;
    private javax.swing.JTable tblLimit;
    private javax.swing.JTable tblObjects;
    private javax.swing.JTable tblOtherItem;
    private javax.swing.JTextField txtDogovor;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtMinistry;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables

    /**
     * @param idCompany the idCompany to set
     */
    public void setIdCompany(int idCompany) {
//        System.out.println("setidCompany void");
        this.idCompany = idCompany;
        set_CompanyFilter();// выборка данных по идентификатору компании
    }

    /**
     * выбирает данные по идентификатору компании
     */
    private void set_CompanyFilter(){
//        System.out.println("setCompanyfilter void");
//        System.out.println("tabselindex=" + tabselIndex);
        // меняем курсор на часики
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        getWarning();// замечания
        getBank();// банк
        getMinistry();// министерство
        getPhone();// телефон
        getMail();// электронная почта
        getStateDogovor();// состояние договора
        getLimit();
        if(cmbYear.getItemCount() > 0){
            cmbYear.setSelectedIndex(0);// информация по потреблению
            getFlow(0);
        } else {
            getFlow(0);
        }
        getObjects();
        getLetter();
        getBook();
        getJournal();
        getOtherInform();
        // возвращаем курсор
        setCursor(Cursor.getDefaultCursor());
    }
    
    /**
     * создаём и заполняем списки министерств и состояния договора
     * а также список лет для фильтра по годам
     */
    private void addListItem() throws SQLException{
        DefaultListModel<String> ministryModel = new DefaultListModel<>();
        // создаём список министерств с заданной моделью
        final SprministryDaoImpl smdi = new SprministryDaoImpl();
        for(int i = 0; i < smdi.getCount(); i++){
            // заполняем модель данными запроса
            Sprministry ministry = smdi.getItem(i);
            ministryModel.addElement(ministry.getMinistryName());
        }
        lstMinistry = new JList(ministryModel);
        
        // создаём список сосотяний с заданной моделью
        DefaultListModel<String> stateModel = new DefaultListModel<>();
        final SpragrimentstateDaoImpl sadi = new SpragrimentstateDaoImpl();
        for(int i = 0; i < sadi.getCount(); i++){
            // заполняем модель данными запроса
            Spragrimentstate state = sadi.getItem(i);
            stateModel.addElement(state.getAgrimentName());
        }
        lstStateDogovor = new JList(stateModel);
        
        // добавляем слушатели событий для списков
        lstMinistry.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                try {
                    if(lstMinistry.getSelectedIndex() != -1){
                        // при выборе элемента из списка обновляем записи в базе данных
    //                    Ministry ministry = new Ministry(idCompany);
                        Sprministry sprministry = smdi.getItem(lstMinistry.getSelectedIndex());
                        if(entMinistry == null){
                            // если данных нет, то создаём сущность
                            MinistryDaoImpl mdi = new MinistryDaoImpl(idCompany);
                            mdi.addItem("IDORGANIZATION", "?", new int[] {idCompany});
                            mdi.getEntities();// обновляем данные
                            entMinistry = mdi.getItem(0);
                        }
                        entMinistry.setIdMinistry(sprministry.getId());// изменяем данные

                        // и в текстовом поле
                        txtMinistry.setText(lstMinistry.getSelectedValue().toString());
                        ministryPane.setVisible(false);// скрываем список
                        lstMinistry.clearSelection();// сбрасываем выбранный элемент
                    }
                } catch (Exception ex) {
                    ministryPane.setVisible(false);// скрываем список
                    Logger.getLogger(InformFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        lstStateDogovor.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                try {
                    if(lstStateDogovor.getSelectedIndex() != -1){
                        // при выборе элемента из списка обновляем записи в базе данных
                        Spragrimentstate state = sadi.getItem(lstStateDogovor.getSelectedIndex());
                        if(entAgreement == null){
                            // если данных нет, то создаём сущность
                            AgreementstateDaoImpl adi = new AgreementstateDaoImpl(idCompany);
                            adi.addItem("IDORGANIZATION", "?", new int[]{idCompany});
                            adi.getEntities();// обновляем данные
                            entAgreement = adi.getItem(0);
                        }
                        entAgreement.setIdState(state.getId());// изменяем данные
                        // и в текстовом поле
                        txtDogovor.setText(lstStateDogovor.getSelectedValue().toString());
                        statePane.setVisible(false);// скрываем список
                        lstStateDogovor.clearSelection();// сбрасываем выделение
                    }
                } catch (Exception ex) {
                    statePane.setVisible(false);// скрываем список
                    Logger.getLogger(InformFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        // задаём обрамление списков
        lstMinistry.setBorder(BorderFactory.createLineBorder(Color.black));
        lstStateDogovor.setBorder(BorderFactory.createLineBorder(Color.black));
        
        // устанавливаем одиночный выбор для пользователя
        lstMinistry.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstMinistry.setSize(txtMinistry.getWidth(), txtMinistry.getHeight() * 7);
        lstStateDogovor.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstStateDogovor.setSize(txtDogovor.getWidth(), txtDogovor.getHeight() * 2);
        
        // добавляем их на форму
        ministryPane = new JScrollPane(lstMinistry);
//        ministryPane.setViewportView(lstMinistry);
        statePane = new JScrollPane(lstStateDogovor);
//        statePane.setViewportView(lstStateDogovor);
        jPanel2.add(ministryPane);
        jPanel2.add(statePane);
        
        // задаём невидимость списков и их расположение на форме
        ministryPane.setVisible(false);
        ministryPane.setLocation(txtMinistry.getLocation().x, 
                txtMinistry.getLocation().y + txtMinistry.getHeight() +3);
        statePane.setVisible(false);
        statePane.setLocation(txtDogovor.getLocation().x, 
                txtDogovor.getLocation().y + txtDogovor.getHeight() +3);
        
        // выводим их на передний план
        jPanel2.setComponentZOrder(ministryPane, 0);
        jPanel2.setComponentZOrder(statePane, 0);
        
        // определяем текущий год
        GregorianCalendar now = new GregorianCalendar();
        int year = now.get(Calendar.YEAR);
        // первым элементом в списке будет "снять фильтр"
        cmbYear.addItem("снять фильтр");
        // заполняем список лет - начинается с 2015 года
        for (int i = 2015; i <= year; i++)
            cmbYear.addItem(i);
    }

    
    private void getFlow(int Index){
        final MyTableModel mtModel;
        // если данные содержатся
        int[] colIndex;
        String[] colname;
        Class[] colClass;
        Object[][] content;
        if(Index == 0){
            flowDao = new FlowDaoImpl(idCompany);// получаем данные
        } else {
            String[] filterName = new String[]{"idorganization", "idyear"};
            int[] filterValue = new int[]{idCompany, Index};
            flowDao = new FlowDaoImpl(filterName, filterValue);
        }
        // задаём имена полей и типы данных
        colname = flowDao.getColumnName();
        colClass = flowDao.getColumnClass();
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblFlowItem);
        String colWidth = tprops.getColWidth();
        
        if(flowDao.getCount() > 0){
            // массив нередактируемых столбцов
            colIndex = new int[2];// столбец код
            colIndex[0] = 0;
            colIndex[1] = 1;
            
            // заполняем данными модель для таблицы
            content = new Object[flowDao.getCount()][];
            for(int i = 0; i < flowDao.getCount(); i++){
                Flow flow = flowDao.getItem(i);
                content[i] = flow.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colClass);
            MDIObject.fullTableData(colIndex, mtModel, tblFlowItem);
            
            
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
                    Flow flow = flowDao.getItem(Row);
                    flow.updateValue(Col, value);
                }
            });
            // подсчитываем количество
            long sum = 0;
            for(int i = 0; i < tblFlowItem.getRowCount(); i++){
                long flow = Long.parseLong(tblFlowItem.getValueAt(i, 3).toString());
                sum = sum + flow;
            }
            lblCommonFlow.setText("Всего : " + sum);
            
        } else {
            Object[] val = new Object[6];
            colIndex = new int[6];
            for(int i = 0; i < 6; i++){
                val[i] = "";
                colIndex[i] = i;
            }
            content = new Object[][]{val};
            
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colClass);
            MDIObject.fullTableData(colIndex, mtModel, tblFlowItem);
            lblCommonFlow.setText("Всего : ");
        }
        
        
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        
        // добавляем слушатель модели столбцов
        tblFlowItem.getColumnModel().addColumnModelListener(FlowcolumnListener);
    }
    
    private void getOtherInform(){
        // в зависимости от выбранной информации, задаём массив нередактируемых
        // столбцов таблицы, наименование таблицы, из которой получаем данные
        String tablename;
        String[] columnName;// массивы наименований и
        Class[] columnClass;// типов данных столбцов
        switch(tabselIndex){
            case 6:
                tablename = "registration";// реквизиты
                columnName = new String[]{"№","Свидетельство","Дата","ЕГРЮЛ",
                    "Юридический адрес","Руководитель","Учредители"};
                columnClass = new Class[]{Integer.class, String.class, 
                String.class, String.class, String.class, String.class, String.class};
                break;
            case 7:
                // уведомления
                tablename = "uvedomlenie";
                columnName = new String[]{"№", "Содержание", "№ акта"};
                columnClass = new Class[]{Integer.class, String.class, String.class};
                break;
            case 8:
                // договора
                tablename = "agreement";
                columnName = new String[]{"№","№ договора", "Дата","Предмет договора",
                    "Субъект договора"};
                columnClass = new Class[]{Integer.class, String.class, String.class, 
                    String.class, String.class};
                break;
            default:
                tablename = "registration";// реквизиты
                columnName = new String[]{"№","Свидетельство","Дата","ЕГРЮЛ",
                    "Юридический адрес","Руководитель","Учредители"};
                columnClass = new Class[]{Integer.class, String.class, 
                String.class, String.class, String.class, String.class, String.class};
                break;
        }
        getData(tablename, columnName, columnClass);
        
    }
    
    private void getData(String tableName, String[] colname, Class[] colClass){
        otherDao = new TableDaoImpl(tableName);// объект доступа к нужной таблице
        otherDao.setCriteria("idorganization");// критерий отбора данных
        otherDao.setIdCriteria(idCompany);// значение критерия отбора данных
        otherDao.getEntities();// получаем данные
        Object[][] content = new Object[otherDao.getCount()][colname.length];// массив содержимого источника данных
        final MyTableModel mtModel;
        // массив нередактируемых столбцов
        int[] col;
        
        if(otherDao.getCount() > 0){
            // если данные есть, заполняем модель таблицы, получаем наименования столбцов
            // формируем данные для заполнения модели таблицы
            for(int i = 0; i < otherDao.getCount(); i++){
                TableEntity entity = otherDao.getItem(i);
                entity.setTablename(tableName);
                Object[] toDataArray = entity.toDataArray();
                content[i][0] = toDataArray[0];// номер записи
                for(int j = 1; j < colname.length; j++)
                    // нужно исключить поле idorganization
                    content[i][j] = toDataArray[j + 1];
            }
            // получаем наименования полей таблицы
            final String[] columnName = new String[colname.length];
            String[] columns = otherDao.getColumnName();
            for(int i = 0; i < colname.length - 1; i++){
                columnName[i] = columns[i + 2];
//                System.out.println(columnName[i]);
            }
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colClass);
            col = new int[1];// столбец Номер
            col[0] = 0;
//            fullTableData(col, mtModel, tblOtherItem);
            
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
//                    System.out.println("value = " + value.toString());
                    TableEntity entity = otherDao.getItem(Row);
                    entity.updateEntity(columnName[Col - 1], value);
                }
            });
        } else {
//             если данных нет, заполним таблицу пустыми строками
            Object[] val = new Object[colname.length];
            col = new int[colname.length];
            for(int i = 0; i < colname.length; i++){
                val[i] = "";
                col[i] = i;
            }
            content = new Object[][]{val};
            
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colClass);
        }
        MDIObject.fullTableData(col, mtModel, tblOtherItem);
        
        // задаём ширину столбцов таблицы
        MDIObject.setTablecolwidth(props,"tbl" + tableName + "width", tblOtherItem);
    }
    
    
    private void getWarning(){
        warningDao = new WarningDaoImpl(idCompany);// получаем данные
        int[] colIndex;
        Object[][] content;
        final MyTableModel mtModel;
        String[] colname = warningDao.getColumnName();
        Class[] colclass = warningDao.getColumnClass();
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblCommentItem);
        String colWidth = tprops.getColWidth();
        
        if(warningDao.getCount() > 0){
            
            // если данные есть, заполняем таблицу
            content = new Object[warningDao.getCount()][];
            for(int i = 0; i < warningDao.getCount(); i++){
                Warning warning = warningDao.getItem(i);
                content[i] = warning.toDataArray();
            }
            
            // массив нередактируемых столбцов
            colIndex = new int[1];// столбец код
            colIndex[0] = 0;

            // получаем модель для таблицы
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colclass);
            
            // добавляем слушателя таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    // получаем значение редактируемой ячейки и преобразовуем
                    // его к нужному типу данных
                    int row = e.getFirstRow();
                    int col = e.getColumn();
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(row, col), col);
                    
                    // получаем экземпляр сущности
                    Warning warning = warningDao.getItem(row);
                    warning.updateValue(col,value);
                }
            });
        } else {
            Object[] val = new Object[]{"","",false};
            colIndex = new int[]{0,1,2};
            content = new Object[][]{val};
            
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colclass);
//            MDIObject.fullTableData(colIndex, mtModel, tblCommentItem);
        }
        MDIObject.fullTableData(colIndex, mtModel, tblCommentItem);
        
        // восстанавливаем ширину столбцов таблицы
        tprops.setColWidth();
        // добавляем слушатель модели столбцов
        tblCommentItem.getColumnModel().addColumnModelListener(WarningcolumnListener);
    }
    
    
    private void getBank(){
        bankDao = new BankDaoImpl(idCompany);// набор данных для банка
        int[] colIndex;
        Object[][] content;
        String[] colname = bankDao.getColumnName();// наименования и типы данных
        Class[] colclass = bankDao.getColumnClass();// столбцов таблицы
        final MyTableModel mtModel;
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblBankItem);
        String colWidth = tprops.getColWidth();
        
        if(bankDao.getCount() > 0){
            // массив нередактируемых столбцов
            colIndex = new int[1];// столбец код
            colIndex[0] = 0;

            // заполняем модель таблицы данными
            content = new Object[bankDao.getCount()][];
            for(int i = 0; i < bankDao.getCount(); i++){
                Bank bank = bankDao.getItem(i);
                content[i] = bank.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colclass);
//            MDIObject.fullTableData(colIndex, mtModel, tblBankItem);
            
            // во второй столбец таблицы добавляем список выбора банков
            // для этого создаём объект доступа к данным справочника банков
            final SprbankDaoImpl sbdi = new SprbankDaoImpl();
            Object[] contentBank = new Object[sbdi.getCount()];
            for(int i = 0; i < sbdi.getCount(); i++){
                Sprbank sbank = sbdi.getItem(i);
                contentBank[i] = sbank.getBankName();
//                System.out.println(contentBank[i]);
                
            }
            ComboBoxModel boxmodel = new DefaultComboBoxModel(contentBank);// модель списка
            final JComboBox bankBox = new JComboBox(boxmodel);
            
            // устанавливаем его в качестве списка выбора в столбце таблицы
            DefaultCellEditor bankEditor = new DefaultCellEditor(bankBox);
            TableColumnModel bankColumn = tblBankItem.getColumnModel();
            bankColumn.getColumn(1).setCellEditor(bankEditor);
            
            // добавляем слушетель списка
            bankBox.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    // получаем выбранную сущность справочника банка
                    Sprbank sbank = sbdi.getItem(bankBox.getSelectedIndex());
//                    System.out.println("sbank.getId()=" + sbank.getId());
                    int row = tblBankItem.getSelectedRow();
//                    System.out.println("row=" + row);
                    Bank bank = bankDao.getItem(row);
                    bank.setIdbank(sbank.getId());
                }
            });
            
            // добавляем слушателя модели
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    // получаем координаты редактируемой ячейки
                    int col = e.getColumn();
                    if(col == 2){
                        // если редактируется столбец не наименование банка
                        // тогда разрешаем редактирование
                        int row = e.getFirstRow();

                        // преобразуем значение в ячейке к нужному типу данных
                        Object value = 
                                mtModel.upgradeCellValue(mtModel.getValueAt(row, col), col);
                        System.out.println("counter" + value.toString());
                        // получаем экземпляр сущности
                        Bank bank = bankDao.getItem(row);
                        
                        // изменяем свойство в зависимости от номера столбца
                        bank.setCounter(value.toString());
                    }
                }
            });
        } else {
            Object[] val = new Object[]{"","",""};
            colIndex = new int[]{0,1,2};
            content = new Object[][]{val};
            
            mtModel = new MDIObject.MyTableModelImpl(content, colname, colclass);
//            MDIObject.fullTableData(colIndex, mtModel, tblBankItem);
        }
        MDIObject.fullTableData(colIndex, mtModel, tblBankItem);
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        
        // добавляем слушатель модели столбцов
        tblBankItem.getColumnModel().addColumnModelListener(BankcolumnListener);
    }
    
    
    private void getMinistry(){
        // получаем данные по министерству
        MinistryDaoImpl mdi = new MinistryDaoImpl(idCompany);
        if(mdi.getCount() > 0){
            // если данные есть
            entMinistry = mdi.getItem(0);
//            System.out.println("id ministry=" + entMinistry.getIdMinistry());
            txtMinistry.setText(entMinistry.getMinistryName());
        } else {
            entMinistry = null;
            txtMinistry.setText("");
        }
    }
    
    
    private void getPhone(){
        // получаем данные по телефону
        PhoneDaoImpl phonedao = new PhoneDaoImpl(idCompany);
        if(phonedao.getCount() > 0){
            // если данные есть
            entPhone = phonedao.getItem(0);
            txtPhone.setText(entPhone.getPhone());
            txtPhone.setEditable(true);
        } else {
            txtPhone.setText("");
            txtPhone.setEditable(false);
        }
    }
    
    
    private void getMail(){
        // получаем данные по министерству
        EmailDaoImpl edi = new EmailDaoImpl(idCompany);
        if(edi.getCount() > 0){
            // если данные есть
            entEmail = edi.getItem(0);
            txtMail.setText(entEmail.getMail());
            txtMail.setEditable(true);
        } else {
            txtMail.setText("");
            txtMail.setEditable(false);
        }
    }
    
    private void getStateDogovor(){
        AgreementstateDaoImpl asdi = new AgreementstateDaoImpl(idCompany);
//        System.out.println("id=" + idCompany);
        if(asdi.getCount() > 0){
            // если есть данные
//            System.out.println(asdi.getCount());
            entAgreement = asdi.getItem(0);
            txtDogovor.setText(entAgreement.getStateName());
        } else {
            entAgreement = null;
            txtDogovor.setText("");
        }
    }
    
    private void getLimit(){
        limitDao = new LimitDaoImpl(idCompany);
        Object[][] content;// массив содержимого
        String[] columnName = limitDao.getColumnName();// массив наименовавний столбцов таблицы
        Class[] columnClass = limitDao.getColumnClass();// массив типов данных таблицы
        final MyTableModel mtModel;
        int[] colIndex;// первый столбец таблицы
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblLimit);
        String colWidth = tprops.getColWidth();
        
        // получаем данные и заполняем таблицу
        if(limitDao.getCount() > 0){
            content = new Object[limitDao.getCount()][];
//            columnName = ldi.getColumnName();
//            columnClass = ldi.getColumnClass();
            for(int i = 0; i < limitDao.getCount(); i++){
                Limit limit = limitDao.getItem(i);
                content[i] = limit.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[1];// массив нередактируемых столбцов
            colIndex[0] = 0;
            
            // заполняем таблицу
            MDIObject.fullTableData(colIndex, mtModel, tblLimit);
        
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
                    Limit limit = limitDao.getItem(Row);
                    limit.updateValue(Col, value);
                }
            });
            // подсчитываем количество лимита
            long sum = 0;
            for(int i = 0; i < tblLimit.getRowCount(); i++){
                long limit = Long.parseLong(tblLimit.getValueAt(i, 2).toString());
                sum = sum + limit;
            }
            lblCommonLimit.setText("Всего : " + sum);
        } else {
//            columnName = new String[]{"№","Месяц","Лимит"};
//            columnClass = new Class[]{String.class,String.class,String.class};
            Object[] val = new Object[]{"","",""};
            content = new Object[][]{val};
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[]{0,1,2};
            // заполняем таблицу
            MDIObject.fullTableData(colIndex, mtModel, tblLimit);
            lblCommonLimit.setText("Всего : ");
        }
        
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        // добавляем слушатель модели столбцов таблицы
        tblLimit.getColumnModel().addColumnModelListener(LimitcolumnListener);

    }
    
    private void getObjects(){
        objectsDao = new ObjectsDaoImpl(idCompany);
        Object[][] content;// массив содержимого
        String[] columnName = objectsDao.getColumnName();// массив наименовавний столбцов таблицы
        Class[] columnClass = objectsDao.getColumnClass();// массив типов данных таблицы
        final MyTableModel mtModel;
        int[] colIndex;// массив нередактируемых столбцоа таблицы
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblObjects);
        String colWidth = tprops.getColWidth();
        
        // получаем данные и заполняем таблицу
        if(objectsDao.getCount() > 0){
            content = new Object[objectsDao.getCount()][];
//            columnName = objectsDao.getColumnName();
//            columnClass = objectsDao.getColumnClass();
            for(int i = 0; i < objectsDao.getCount(); i++){
                OrgObjects objects = objectsDao.getItem(i);
                content[i] = objects.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[]{0,2,3};// №, город, улица
            
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
                    OrgObjects objects = objectsDao.getItem(Row);
                    objects.updateEntity(Col, value);
                }
            });
            
        } else {
//            columnName = new String[]{"№","Наименование","Населённый пункт",
//            "Улица","Адрес","Ответственный","Телефон","Дата пуска","Включен"};
//            columnClass = new Class[]{String.class,String.class,String.class,
//            String.class,String.class,String.class,String.class,String.class,
//            String.class};
            Object[] val = new Object[]{"","","","","","","","",false};
            content = new Object[][]{val};
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[]{0,1,2,3,4,5,6,7,8};
            // заполняем таблицу
//            MDIObject.fullTableData(colIndex, mtModel, tblObjects);
        }
        // заполняем таблицу
        MDIObject.fullTableData(colIndex, mtModel, tblObjects);
        
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        // добавляем слушатель модели столбцов таблицы
        tblObjects.getColumnModel().addColumnModelListener(ObjectcolumnListener);
            
    }
    
    private void getBook(){
        bookDao = new BookDaoImpl(idCompany);
        Object[][] content;// массив содержимого
        String[] columnName = bookDao.getColumnName();// массив наименовавний столбцов таблицы
        Class[] columnClass = bookDao.getColumnClass();// массив типов данных таблицы
        final MyTableModel mtModel;
        int[] colIndex = new int[1];// массив нередактируемых столбцов
        colIndex[0] = 0;// первый столбец таблицы
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblBook);
        String colWidth = tprops.getColWidth();
        
        // получаем данные и заполняем таблицу
        if(bookDao.getCount() > 0){
            content = new Object[bookDao.getCount()][];
            for(int i = 0; i < bookDao.getCount(); i++){
                Book book = bookDao.getItem(i);
                content[i] = book.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            
            // заполняем таблицу
//            MDIObject.fullTableData(colIndex, mtModel, tblBook);
            
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
                    Book book = bookDao.getItem(Row);
                    book.updateValue(Col, value);
                }
            });
            
        } else {
//            columnName = new String[]{"№", "Книга", "Страница"};
//            columnClass = new Class[]{String.class,String.class,String.class};
            Object[] val = new Object[]{"","",""};
            content = new Object[][]{val};
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[]{0,1,2};
            // заполняем таблицу
//            MDIObject.fullTableData(colIndex, mtModel, tblBook);
        }
        // заполняем таблицу
        MDIObject.fullTableData(colIndex, mtModel, tblBook);
        
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        
        // добавляем слушатель модели столбцов
        tblBook.getColumnModel().addColumnModelListener(BookcolumnListener);
    }
    
    private void getJournal(){
        journalDao = new JournalDaoImpl(idCompany);
        Object[][] content;// массив содержимого
        String[] columnName = journalDao.getColumnName();// массив наименовавний столбцов таблицы
        Class[] columnClass = journalDao.getColumnClass();// массив типов данных таблицы
        final MyTableModel mtModel;
        int[] colIndex;// первый столбец таблицы
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblJournal);
        String colWidth = tprops.getColWidth();
        
        // получаем данные и заполняем таблицу
        if(journalDao.getCount() > 0){
            content = new Object[journalDao.getCount()][];
            for(int i = 0; i < journalDao.getCount(); i++){
                Journal journal = journalDao.getItem(i);
                content[i] = journal.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[1];// массив нередактируемых столбцов
            colIndex[0] = 0;// первый столбец таблицы
            
            
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
                    Journal journal = journalDao.getItem(Row);
                    journal.updateValue(Col, value);
                }
            });
            
        } else {
//            columnClass = new Class[]{String.class,String.class,String.class};
            Object[] val = new Object[]{"","",""};
            content = new Object[][]{val};
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[]{0,1,2};
            // заполняем таблицу
//            MDIObject.fullTableData(colIndex, mtModel, tblJournal);
        }
        // заполняем таблицу
        MDIObject.fullTableData(colIndex, mtModel, tblJournal);
        
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        tblJournal.getColumnModel().addColumnModelListener(JournalcolumnListener);
    }
    
    private void getLetter(){
        letterDao = new LetterDaoImpl(idCompany);
        Object[][] content;// массив содержимого
        String[] columnName = letterDao.getColumnName();// массив наименовавний столбцов таблицы
        Class[] columnClass = letterDao.getColumnClass();// массив типов данных таблицы
        final MyTableModel mtModel;
        int[] colIndex;// первый столбец таблицы
        
        // запоминаем ширину столбцов таблицы
        tprops.setTable(tblLetter);
        String colWidth = tprops.getColWidth();
        
        // получаем данные и заполняем таблицу
        if(letterDao.getCount() > 0){
            content = new Object[letterDao.getCount()][];
            for(int i = 0; i < letterDao.getCount(); i++){
                Letter letter = letterDao.getItem(i);
                content[i] = letter.toDataArray();
            }
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[1];// массив нередактируемых столбцов
            colIndex[0] = 0;// первый столбец таблицы
            
            
            // добавляем слушетеля изменений таблицы
            mtModel.addTableModelListener(new TableModelListener() {

                @Override
                public void tableChanged(TableModelEvent e) {
                    int Row = e.getFirstRow();// номер редактируемой строки
                    int Col = e.getColumn();// номер редактируемого столбца
                    Object value = 
                            mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
//                    System.out.println("value = " + value);
                    Letter letter = letterDao.getItem(Row);
                    letter.updateValue(Col, value);
                }
            });
            
        } else {
//            columnName = new String[]{"№", "№ акта", "Дата", "Содержание"};
//            columnClass = new Class[]{String.class,String.class,String.class,String.class};
            Object[] val = new Object[]{"","","",""};
            content = new Object[][]{val};
            
            mtModel = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            colIndex = new int[]{0,1,2,3};
            // заполняем таблицу
//            MDIObject.fullTableData(colIndex, mtModel, tblLetter);
        }
        // заполняем таблицу
        MDIObject.fullTableData(colIndex, mtModel, tblLetter);
        
        // задаём ширину столбцов таблицы
        tprops.setColWidth();
        
        // добавляем слушатель
        tblLetter.getColumnModel().addColumnModelListener(LettercolumnListener);
    }
    
    
    private void addNumber(String tableName, JTextField txt){
        // был двойной щелчок по метке и в поле номеров нет данных
        if(JOptionPane.showConfirmDialog(this.getParent(), 
                "Добавить новую запись?", "Consumer", 
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            // добавляем запись в выбранную таблицу
            Runquery rq = new Runquery(tableName);
            int[] param = new int[]{idCompany};
            if(rq.addEntity("IDORGANIZATION", "?", param) == true){
                // если добавление новой записи прошло нормально
                if(tableName.equals("PHONE")){
                    // получаем записи телефонов
                    getPhone();
                    
                } else {
                    // получаем записи электронной почты
                    getMail();
                }
                txt.setFocusable(true);
            }
        }
    }
    
    
//    private void fullTableData(int[] colIndex, 
//            final MyTableModel Model, final JTable table){
//            Model.setCellNoEditableList(colIndex);
//            table.setModel(Model);
//            Model.setTableColumnIdentifiers(table.getColumnModel());
//    }
//    
//    private void setTablecolwidth(String propertyName, JTable table){
//        // считываем из файла свойств размеры столбцов таблиц
//        String colWidth = props.getProperty(propertyName);
//        System.out.println("name= " + propertyName + ", colwidth=" + colWidth);
//        
//        if(colWidth != null){
//            // создаём класс для установки размеров столбцов таблиц
//            tprops = new TableProperty(colWidth, table);
//            tprops.setColWidth();// задаём ширину столбцов
//        }
//    }
    
    /**
     * добавление новой записи в таблицу
     */
    private void addNewRecord(){
        int button = JOptionPane.showConfirmDialog(this, 
                "Добавить новую запись?", "Consumer", 
                JOptionPane.YES_NO_OPTION);
        if(button == JOptionPane.YES_OPTION){
            // запись в таблицу банков будем добавлять в отдельном методе
            if(!dbTableName.equals("BANK")){
                // добавляем запись в выбранную таблицу
                Runquery rq = new Runquery(dbTableName);
                int[] param = new int[]{idCompany};
                if(rq.addEntity("IDORGANIZATION", "?", param) == true){
                    // если добавление новой записи прошло нормально
                    // проверяем на какой таблице выполнялся вывод меню
                    switch(dbTableName){
                        case "LIMIT":
                            // лимиты
                            getLimit();
                            break;
                        case "FLOW":
                            // потребление
                            getFlow(cmbYear.getSelectedIndex());
                            break;
                        case "OBJECTS":
                            // объекты
                            break;
                        case "LETTER":
                            // письма
                            getLetter();
                            break;
                        case "BOOK":
                            // книга
                            getBook();
                            break;
                        case "JOURNAL":
                            // журнал
                            getJournal();
                            break;
                        case "REGISTRATION":
                            // регистрация, уведомления, договора
                            getOtherInform();
                            break;
                        case "UVEDOMLENIE":
                            // регистрация, уведомления, договора
                            getOtherInform();
                            break;
                        case "AGREEMENT":
                            // регистрация, уведомления, договора
                            getOtherInform();
                            break;
                        case "PHONE":
                            getPhone();
                            txtPhone.setFocusable(true);
                            break;
                        case "EMAIL":
                            getMail();
                            txtMail.setFocusable(true);
                            break;
                        case "WARNING":
                            getWarning();
                            break;
                        default:
                            break;
                    }
                    
                } else {
                    JOptionPane.showConfirmDialog(this, 
                            "Произошли ошибки во время операции добавления записи!",
                            "Consumer", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                addBank();
            }
        }
    }
    
    /**
     * добавляет запись в таблицу Банк
     */
    private void addBank(){
        // получаем данные из справочника банков
        SprbankDaoImpl sbdi = new SprbankDaoImpl();
        
        // получаем код первого банка в списке
        int idBank = sbdi.getItem(0).getId();
        
        // добавляем запись
        Runquery rq = new Runquery(dbTableName);
        int[] param = new int[]{idCompany, idBank};
        if(rq.addEntity("IDORGANIZATION,IDBANK", "?,?", param)){
            // если добавление записи прошло удачно обновляем данные
            getBank();
        } else {
            JOptionPane.showConfirmDialog(this, 
                    "Произошли ошибки во время операции добавления записи!",
                    "Consumer", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * удаление существующей записи из таблицы
     */
    private void deleteThisRecord(){
        int button = JOptionPane.showConfirmDialog(this, "Удалить запись?", 
                "Consumer", JOptionPane.YES_NO_OPTION);
        if(button == JOptionPane.YES_OPTION){
            int identifier;// идентификатор записи
            // проверяем на какой таблице выполнялся вывод меню
            switch(tabselIndex){
                case 0:
                    // лимиты
                    // получаем идентификатор удаляемой записи
                    identifier = limitDao.getItem(tblLimit.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getLimit();
                    break;
                case 1:
                    // потребление
                    // получаем идентификатор удаляемой записи
                    identifier = flowDao.getItem(tblFlowItem.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getFlow(cmbYear.getSelectedIndex());
                    break;
                case 3:
                    // письма
                    // получаем идентификатор удаляемой записи
                    identifier = letterDao.getItem(tblLetter.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getLetter();
                    break;
                case 4:
                    // книга
                    // получаем идентификатор удаляемой записи
                    identifier = bookDao.getItem(tblBook.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getBook();
                    break;
                case 5:
                    // журнал
                    // получаем идентификатор удаляемой записи
                    identifier = journalDao.getItem(tblJournal.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getJournal();
                    break;
                case 6:
                    // регистрация
                    // получаем идентификатор удаляемой записи
                    identifier = otherDao.getItem(tblOtherItem.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getOtherInform();
                    break;
                case 7:
                    // уведомления
                    // получаем идентификатор удаляемой записи
                    identifier = otherDao.getItem(tblOtherItem.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getOtherInform();
                    break;
                case 8:
                    // договора
                    // получаем идентификатор удаляемой записи
                    identifier = otherDao.getItem(tblOtherItem.getSelectedRow()).getId();
                    // удаляем запись и проверяем результат
                    if(removeEntity(identifier) == true)
                        getOtherInform();
                    break;
                default:
                    // телефон и электронная почта
                    switch (dbTableName) {
                        case "BANK":
                            // получаем идентификатор удаляемой записи
                            identifier = bankDao.getItem(tblBankItem.getSelectedRow()).getId();
                            // удаляем запись и проверяем результат
                            if(removeEntity(identifier) == true)
                                getBank();
                            break;
                        default:
                            // получаем идентификатор удаляемой записи
                            identifier = warningDao.getItem(tblCommentItem.getSelectedRow()).getId();
                            // удаляем запись и проверяем результат
                            if(removeEntity(identifier) == true)
                                getWarning();
                            break;
                    }
                    break;
            }
        }
    }
    
    /**
     * экспорт таблицы в файл xls
     */
    private void exportToXLSFile(){
        
    }
    
    /**
     * экспорт таблицы в файл ods
     */
    private void exportToODSFile(){
        
    }
    
    
    /**
     * экспорт таблицы в файл csv
     */
    private void exportToCSVFile(){
        
    }
    
    private void setColumnListener(){
        // перед установкой слушателей считываем из файла и задаём ширину всех таблиц
        MDIObject.setTablecolwidth(props,"tbllimitwidth", tblLimit);
        MDIObject.setTablecolwidth(props,"tblflowwidth", tblFlowItem);
        MDIObject.setTablecolwidth(props,"tblobjectswidth", tblObjects);
        MDIObject.setTablecolwidth(props,"tblletterwidth", tblLetter);
        MDIObject.setTablecolwidth(props,"tblbookwidth", tblBook);
        MDIObject.setTablecolwidth(props,"tbljournalwidth", tblJournal);
        MDIObject.setTablecolwidth(props,"tblbankwidth", tblBankItem);
        MDIObject.setTablecolwidth(props,"tblcommentwidth", tblCommentItem);
//        setTablecolwidth("tblregistrationwidth", tblOtherItem);
        
        // создаём слушателей моделей столбцов таблиц
        LimitcolumnListener = new ColumnModelListener(tblLimit, props, "tbllimitwidth");
        FlowcolumnListener = new ColumnModelListener(tblFlowItem, props, "tblflowwidth");
        ObjectcolumnListener = new ColumnModelListener(tblObjects, props, "tblobjectswidth");
        LettercolumnListener = new ColumnModelListener(tblLetter, props, "tblletterwidth");
        BookcolumnListener = new ColumnModelListener(tblBook, props, "tblbookwidth");
        JournalcolumnListener = new ColumnModelListener(tblJournal, props, "tbljournalwidth");
        BankcolumnListener = new ColumnModelListener(tblBankItem, props, "tblbankwidth");
        WarningcolumnListener = new ColumnModelListener(tblCommentItem, props, "tblcommentwidth");
        tblLimit.getColumnModel().addColumnModelListener(LimitcolumnListener);
        tblFlowItem.getColumnModel().addColumnModelListener(FlowcolumnListener);
        tblObjects.getColumnModel().addColumnModelListener(ObjectcolumnListener);
        tblLetter.getColumnModel().addColumnModelListener(LettercolumnListener);
        tblBook.getColumnModel().addColumnModelListener(BookcolumnListener);
        tblJournal.getColumnModel().addColumnModelListener(JournalcolumnListener);
        tblBankItem.getColumnModel().addColumnModelListener(BankcolumnListener);
        tblCommentItem.getColumnModel().addColumnModelListener(WarningcolumnListener);
    }
    
    /**
     * удаление записи из выбранной таблицы
     * @param ID идентификатор удаляемой записи
     */
    private boolean removeEntity(int ID){
        Runquery rq = new Runquery(dbTableName);
        return rq.deleteEntity(ID);// возвращаем результат удаления записи
    }
//    /**
//     * внутренний класс, реализующий модель таблицы с созможностью редактирования
//     * записей таблицы и внесения соответствующих изменений в базу данных
//     */
//    private static class MyTableModelImpl extends MyTableModel {
//
//        public MyTableModelImpl(ResultSet resultset) throws SQLException {
//            super(resultset);
//        }
//
//        public MyTableModelImpl(Object[][] content, String[] columnName, Class[] columnClass) {
//            super(content, columnName, columnClass);
//        }
//
//        public MyTableModelImpl(Object[][] content) {
//            super(content);
//        }
//        
//    }
}
