/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import abonentgaz.TableCell_Editor;
import abonentgaz.TableCell_Renderer;
import dao_impl.TableDaoImpl;
import entities.TableEntity;
import java.math.BigDecimal;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * @author Сергей
 */
public class DispatchFrame extends javax.swing.JInternalFrame {
    private String tableName;
    private boolean editable = false;// признак редактирования таблицы (по умолчанию - нет)
    private TableDaoImpl tdi = null;
    private String[] columnName = null;// имена полей для отображения в заголовках таблицы
    private Class[] columnClass = null;// типы классов (данных) полей
    private String[] colName = null;// имена полей из выбранной таблицы базы данных
    /**
     * Creates new form DispatchFrame
     */
    public DispatchFrame() {
        initComponents();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EditMenu = new javax.swing.JPopupMenu();
        EditMenuAddRecord = new javax.swing.JMenuItem();
        EditMenuDeleteRecord = new javax.swing.JMenuItem();
        EditMenuSaveRecord = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        EditMenuShowCode = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        btnAddNewRecord = new javax.swing.JButton();
        btnDeleteRecord = new javax.swing.JButton();
        btnSaveRecord = new javax.swing.JButton();

        EditMenuAddRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NewDocumentHS.png"))); // NOI18N
        EditMenuAddRecord.setText("добавить запись");
        EditMenuAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuAddRecordActionPerformed(evt);
            }
        });
        EditMenu.add(EditMenuAddRecord);

        EditMenuDeleteRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/DeleteHS.png"))); // NOI18N
        EditMenuDeleteRecord.setText("удалить запись");
        EditMenuDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuDeleteRecordActionPerformed(evt);
            }
        });
        EditMenu.add(EditMenuDeleteRecord);

        EditMenuSaveRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/saveHS.png"))); // NOI18N
        EditMenuSaveRecord.setText("сохранить изменения");
        EditMenuSaveRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuSaveRecordActionPerformed(evt);
            }
        });
        EditMenu.add(EditMenuSaveRecord);
        EditMenu.add(jSeparator1);

        EditMenuShowCode.setText("показать код записи");
        EditMenuShowCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuShowCodeActionPerformed(evt);
            }
        });
        EditMenu.add(EditMenuShowCode);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/base.png"))); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setComponentPopupMenu(EditMenu);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setRollover(true);

        btnAddNewRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NewDocumentHS.png"))); // NOI18N
        btnAddNewRecord.setToolTipText("новая запись");
        btnAddNewRecord.setFocusable(false);
        btnAddNewRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddNewRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddNewRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddNewRecord);

        btnDeleteRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/DeleteHS.png"))); // NOI18N
        btnDeleteRecord.setToolTipText("удалить запись");
        btnDeleteRecord.setFocusable(false);
        btnDeleteRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteRecord);

        btnSaveRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/saveHS.png"))); // NOI18N
        btnSaveRecord.setToolTipText("сохранить");
        btnSaveRecord.setFocusable(false);
        btnSaveRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSaveRecord);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // определяем источник данных для таблицы
        getData();
        
        // выделяем первый столбец и блокируем к нему доступ
        TableCell_Renderer.setIntegerTableCellRenderer(jTable1, null);
        // определяем редактор таблицы
        TableCell_Editor.setNumericTableCellEditor(jTable1);
        TableCell_Editor.setStringTableCellEditor(jTable1);
        MDIObject.addColumnSelectionListener(jTable1);
    }//GEN-LAST:event_formComponentShown

    private void btnAddNewRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewRecordActionPerformed
        addRecord();
    }//GEN-LAST:event_btnAddNewRecordActionPerformed

    private void btnSaveRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveRecordActionPerformed
        // TODO add your handling code here:
        saveRecord();
    }//GEN-LAST:event_btnSaveRecordActionPerformed

    private void EditMenuAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuAddRecordActionPerformed
        // TODO add your handling code here:
        addRecord();
    }//GEN-LAST:event_EditMenuAddRecordActionPerformed

    private void EditMenuDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuDeleteRecordActionPerformed
        // TODO add your handling code here:
        deleteRecord();
    }//GEN-LAST:event_EditMenuDeleteRecordActionPerformed

    private void EditMenuSaveRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuSaveRecordActionPerformed
        // TODO add your handling code here:
        saveRecord();
    }//GEN-LAST:event_EditMenuSaveRecordActionPerformed

    private void EditMenuShowCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuShowCodeActionPerformed
        // TODO add your handling code here:
        showIDRecord();
    }//GEN-LAST:event_EditMenuShowCodeActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        // удаление текущей записи
        deleteRecord();
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    private void getData() {
        // проверяем задан ли набор записей
        tdi = new TableDaoImpl(tableName);
        tdi.getEntities();// получаем данные
        
        // проверяем полученные данные
        if(tdi.getCount() > 0){
            fullTable();// заполняем таблицу данными
        }
    }
    
    /**
     * заполнение таблицы данными и определение слушателя модели
     */
    private void fullTable(){
        Object[][] content = new Object[tdi.getCount()][];// массив содержимого источника данных
        // формируем данные для заполнения модели таблицы
        for(int i = 0; i < tdi.getCount(); i++){
            TableEntity entity = (TableEntity) tdi.getItem(i);
//            System.out.println("id=" + entity.getId() + " index=" + entity.getIndex());
            entity.setTablename(tableName);
            content[i] = entity.toDataArray();
        }

        // если имена полей и типы данных не заданы, то используем имена и типы из базы данных
        if(columnName == null) columnName = tdi.getColumnName();
        if(columnClass == null) columnClass = tdi.getColumnClass();

        colName = tdi.getColumnName();// получаем наименования полей таблицы

        final MyTableModel mtModel = new MDIObject.MyTableModelImpl(content, 
                columnName, columnClass);
        int[] col;
        if(editable == true){
            col = new int[1];//массив нередактируемых столбцов
            col[0] = 0;// нередактируемый столбец №0 (первое поле таблицы)
            mtModel.setCellNoEditableList(col);
//                mtModel.setConnection(parentFrame.getConnect());
//                mtModel.setTable(jTable1);
//                mtModel.setTablename(tableName);
        } else {
            col = new int[columnName.length];
            // заполняем массив нередактируемых столбцов
            for(int i = 0; i < col.length; i++)
                col[i] = i;
        }

        // добавляем слушетеля изменений таблицы
        mtModel.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                int Row = e.getFirstRow();// номер редактируемой строки
                int Col = e.getColumn();// номер редактируемого столбца
                Object value = 
                        mtModel.upgradeCellValue(mtModel.getValueAt(Row, Col), Col);
                TableEntity entity = tdi.getItem(Row);
                entity.updateEntity(colName[Col], value);
            }
        });
        MDIObject.fullTableData(col, mtModel, jTable1);
        jTable1.setModel(mtModel);
        mtModel.setTableColumnIdentifiers(jTable1.getColumnModel());
        // скрываем первый (нередактируемый) столбец
        jTable1.getColumn(0).setMinWidth(0);
        jTable1.getColumn(0).setPreferredWidth(50);
//            resultSet = null;// освобждаем набор
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu EditMenu;
    private javax.swing.JMenuItem EditMenuAddRecord;
    private javax.swing.JMenuItem EditMenuDeleteRecord;
    private javax.swing.JMenuItem EditMenuSaveRecord;
    private javax.swing.JMenuItem EditMenuShowCode;
    private javax.swing.JButton btnAddNewRecord;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnSaveRecord;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * @param tableName the tableName to set
     */
    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    /**
     * @param editable the editable to set
     */
    public void setEditable(boolean editable) {
        this.editable = editable;
    }

    /**
     * @param columnName the columnName to set
     */
    public void setColumnName(String[] columnName) {
        this.columnName = columnName;
    }

    /**
     * @param columnClass the columnClass to set
     */
    public void setColumnClass(Class[] columnClass) {
        this.columnClass = columnClass;
    }

//    private static class MyTableModelImpl extends MyTableModel {
//
//        public MyTableModelImpl(ResultSet resultset) throws SQLException {
//            super(resultset);
//        }
//
//        public MyTableModelImpl(Object[][] content, String[] columnName, Class[] columnClass) {
//            super(content, columnName, columnClass);
//        }
//        
//        
//    }
    
    /**
     * добавление новой записи в выбранную таблицу
     */
    private void addRecord(){
        // запрос на добавление записи
        int button = JOptionPane.showConfirmDialog(getParent(), 
                "Добавить новую запись?", "AbonentGaz", JOptionPane.YES_NO_OPTION);
        if(button == JOptionPane.YES_OPTION){
            // проверяем, в какую таблицу добавляется запись
            int[] foreignCode = new int[1];// код из связанной таблицы
            String fieldName;// строка, содержащая имена полей для добавления
            String escName = "?";
            switch (tableName) {
                case "sprdatchik":
                case "sprcorrector":
                case "sprequipment":
                case "sprcounter":
                    foreignCode[0] = getForeignCode("sprmaker");
                    fieldName = "idmaker";
                    
                    //  проверяем результат добавления записи
                    if(tdi.addItem(fieldName, escName, foreignCode) == true){
                        // если всё нормально, обновляем данные в таблице
                        fullTable();
                        // выделяем добавленную строку
                        jTable1.setRowSelectionInterval(jTable1.getRowCount() - 1, jTable1.getRowCount() - 1);
                        jTable1.setColumnSelectionInterval(1, 1);
                    } else {
                        // извещаем пользователя о неудаче операции
                        JOptionPane.showMessageDialog(this.getParent(), 
                                "Произошли ошибки во время операции добавления" +
                                " записи. Обратитесь к разработчику!", 
                                "AbonentGaz", JOptionPane.ERROR_MESSAGE);

                    }
                    break;
                case "sprcity":
                    foreignCode[0] = getForeignCode("sprgrs");
                    fieldName = "idgrs";
                    
                    //  проверяем результат добавления записи
                    if(tdi.addItem(fieldName, escName, foreignCode) == true){
                        // если всё нормально, обновляем данные в таблице
                        fullTable();
                        // выделяем добавленную строку
                        jTable1.setRowSelectionInterval(jTable1.getRowCount() - 1, jTable1.getRowCount() - 1);
                        jTable1.setColumnSelectionInterval(1, 1);
                    } else {
                        JOptionPane.showMessageDialog(this.getParent(), 
                                "Произошли ошибки во время операции добавления" +
                                " записи. Обратитесь к разработчику!", 
                                "AbonentGaz", JOptionPane.ERROR_MESSAGE);

                    }
                    break;
                default:
                    // для остальных таблиц получаем имя второго по счету поля данных
                    // (наименование столбца), т. к. первое имя - код записи
                    fieldName = colName[1];
                    
                    // проверяем, какой тип данных содержится в поле
                    if(columnClass[1] == Integer.class || 
                            columnClass[1] == BigDecimal.class || 
                            columnClass[1] == Short.class){
                        foreignCode[0] = 0;
                        //  проверяем результат добавления записи
                        if(tdi.addItem(fieldName, escName, foreignCode) == true){
                            fullTable();// если всё нормально, обновляем данные в таблице
                            // выделяем добавленную строку
                            jTable1.setRowSelectionInterval(jTable1.getRowCount() - 1, jTable1.getRowCount() - 1);
                            jTable1.setColumnSelectionInterval(1, 1);
                        } else {
                            JOptionPane.showMessageDialog(this.getParent(), 
                                "Произошли ошибки во время операции добавления" +
                                " записи. Обратитесь к разработчику!", 
                                "AbonentGaz", JOptionPane.ERROR_MESSAGE);

                        }
                    } else {
                        String[] value = {"0"};
                        //  проверяем результат добавления записи
                        if(tdi.addItem(fieldName, escName, value) == true){
                            fullTable();// если всё нормально, обновляем данные в таблице
                            // выделяем добавленную строку
                            jTable1.setRowSelectionInterval(jTable1.getRowCount() - 1, jTable1.getRowCount() - 1);
                            jTable1.setColumnSelectionInterval(1, 1);
                        } else {
                            JOptionPane.showMessageDialog(this.getParent(), 
                                "Произошли ошибки во время операции добавления" +
                                " записи. Обратитесь к разработчику!", 
                                "AbonentGaz", JOptionPane.ERROR_MESSAGE);

                        }
                    }

                    break;
            }
            
        }
    }
    
    /**
     * удаление записи из выбранной таблицы
     */
    private void deleteRecord(){
        // запрос на добавление записи
        int button = JOptionPane.showConfirmDialog(getParent(), 
                "Удалить запись?", "AbonentGaz", JOptionPane.YES_NO_OPTION);
        if(button == JOptionPane.YES_OPTION){
            // проверяем выделена ли какая-либо строка в таблице
            if(jTable1.getSelectedRowCount() > 0){
                int Row = jTable1.getSelectedRow();// номер выделенной строки
                // получаем результат удаления записи
                if(tdi.deleteItem(Row) == true){
                    // всё нормально, обновляем данные в таблице
                    fullTable();
                    // выделяем первую строку в таблице и первый столбец
                    jTable1.setRowSelectionInterval(0, 0);
                    jTable1.setColumnSelectionInterval(1, 1);
                } else {
                    // что-то не получилось
                    JOptionPane.showMessageDialog(this.getParent(), 
                        "Произошли ошибки во время удаления" +
                        " записи. Обратитесь к разработчику!", 
                        "AbonentGaz", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(getParent(), "Выберите строку в таблице.", 
                    "AbonentGaz", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }
    }
    
    /**
     * сохранение изменений в таблице
     */
    private void saveRecord(){
        MDIObject.getInformDialog(null, "Saving...", InformDialog.InformType.SAVING);
    }
    
    /**
     * отображение идентификационного кода записи
     */
    private void showIDRecord(){
        // проверяем, редактируется какая-либо строка; если строка есть
        // показываем код, если нет, просим пользователя выделить нужную строку
        if(jTable1.getSelectedRowCount() > 0){
            int Row = jTable1.getSelectedRow();// выделенная строка
            int idCode = tdi.getItem(Row).getId();// получаем код записи
            // отображаем сообщение с этим кодом
            JOptionPane.showMessageDialog(getParent(), "ID=" + 
                    Integer.toString(idCode), "AbonentGaz", 
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(getParent(), "Выберите строку в таблице.", 
                    "AbonentGaz", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private int getForeignCode(String table){
        // получаем доступ к связанным таблицам
        TableDaoImpl ftdi = new TableDaoImpl(table);
        ftdi.getEntities();// получаем данные из связанной таблицы
        return ftdi.getItem(0).getId();// получаем идентификатор записи
    }
}
