/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import abonentgaz.ColumnModelListener;
import abonentgaz.FrameLayoutManager;
import abonentgaz.TableProperty;
import abonentgaz.UserProperties;
import com.sun.glass.events.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sergii.Tushinskyi
 */
public class FindFrame extends javax.swing.JFrame {

    private FrameLayoutManager flManager;// класс для чтения свойств из файла свойств
    private final String queryfilename;// имя файла свойств с запросами на поиск
    private Queries queries;// класс для получения данных
    private MDIObject parentFrame;
    private ColumnModelListener FindmodelListener;// слушатель изменений столбцов таблицы
    private final String filename;
    private UserProperties props;
    /**
     * Creates new form FindFrame
     */
    public FindFrame() {
        queryfilename = "queryfind.properties";
        filename = "findframe.properties";
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        txtFind = new javax.swing.JTextField();
        findCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        findTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Поиск");
        setSize(new java.awt.Dimension(698, 311));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        findButton.setText("Найти");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        okButton.setText("Принять");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Закрыть");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        txtFind.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFindKeyPressed(evt);
            }
        });

        findCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "№ счётчика", "№ корректора", "№ договора", "№ установленной пломбы", "№ удалённой пломбы", "объект по названию", "объект по адресу", "потребитель" }));
        findCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findComboActionPerformed(evt);
            }
        });

        findTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Заголовок 1", "Заголовок 2", "Заголовок 3", "Заголовок 4"
            }
        ));
        findTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        findTable.setCellSelectionEnabled(true);
        findTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        findTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                findTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(findTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(findCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(findButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton)
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findButton)
                    .addComponent(okButton)
                    .addComponent(closeButton))
                .addContainerGap(194, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findComboActionPerformed
        // при выборе категории поиска очищаем поле ввода искомого значения
        txtFind.setText("");
    }//GEN-LAST:event_findComboActionPerformed

    private void txtFindKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFindKeyPressed
        // при нажатии клавиши ввода выполняем поиск
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            findItem();
    }//GEN-LAST:event_txtFindKeyPressed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // запускаем процедуру поиска
        findItem();
    }//GEN-LAST:event_findButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // если выбрана строка в таблице, перемещаемся к записи с выбранным кодом
        int ID;// код записи
        int row;// номер выбранной строки
        if(findTable.getSelectedRowCount() > 0){
            row = findTable.getSelectedRow();// номер выбранной строки
        
        } else {
//            JOptionPane.showMessageDialog(FindFrame.this, "Сделайте свой выбор!", 
//                    "AbonentGaz", JOptionPane.WARNING_MESSAGE);
            // если пользователь забыл выбрать строку в таблице, то
            // по умолчанию выделяем первую строку
            row = 0;
        }
        ID = Integer.parseInt((String)findTable.getValueAt(row, 1));
        parentFrame.findOrganization(ID);// ищем потребителя по коду
    }//GEN-LAST:event_okButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // скрываем окно
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        // при перемещении формы записываем новое местоположение в файл свойств
//        if(flManager != null){
//            try {
//                flManager.getFrameLocation(this);
//            } catch (Exception ex) {
//                Logger.getLogger(FindFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }//GEN-LAST:event_formComponentMoved

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // считываем координаты формы из файла свойств
        flManager = new FrameLayoutManager("findframe.properties");
        // блокируем кнопку Принять
        okButton.setEnabled(false);
        
        // задаём местоположение формы на экране
//        setLocation(flManager.setFrameLocation());
        
        // задаём размеры формы
        setSize(flManager.setFrameSize());
        
        // создаём класс для считывания строк - запросов и получения данных
        queries = new Queries();
        props = new UserProperties(filename);
//        tprops = new TableProperty(findTable);
        
        // читаем размеры столбцов таблицы из файла свойств
//        MDIObject.setTablecolwidth(props, "0", findTable);
        
        // создаём слушателя столбцов
        FindmodelListener = new ColumnModelListener(findTable, props, "0");
        findTable.getColumnModel().addColumnModelListener(FindmodelListener);
    }//GEN-LAST:event_formComponentShown

    private void findTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_findTablePropertyChange
        // при смене модели удаляем слушателя столбцов
        if(evt.getPropertyName().equals("model"))
            findTable.getColumnModel().removeColumnModelListener(FindmodelListener);
    }//GEN-LAST:event_findTablePropertyChange

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
//         при изменении размеров формы сохраняем их в файле свойств
        if(flManager != null){
            try {
                flManager.getFrameSize(this);
            } catch (Exception ex) {
                Logger.getLogger(FindFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | 
                InstantiationException | IllegalAccessException | 
                javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FindFrame().setVisible(true);
            }
        });
    }
    
    /**
     * Запускает процедуру поиска и заполняет таблицу полученными данными
     */
    private void findItem(){
        int index = findCombo.getSelectedIndex();// номер выбранного элемента в списке
        queries.setIndex(index);
        queries.setCriteria(txtFind.getText());
        if(queries.getEntities() == true){
//            System.out.println("Выполнение успешно");
            okButton.setEnabled(true);// разблокируем кнопку Принять
            
            // заполняем таблицу
            MyTableModel model = new MDIObject.MyTableModelImpl(queries.getContent(), 
                    queries.getColumnName(), queries.getColumnClass());
            
            // заполняем таблицу данными
            MDIObject.fullTableData(null, model, findTable);
            MDIObject.setTablecolwidth(props, String.valueOf(index), findTable);
            
            // создаём слушателя столбцов
            FindmodelListener = new ColumnModelListener(findTable, props, String.valueOf(index));
            findTable.getColumnModel().addColumnModelListener(FindmodelListener);
        } else {
            JOptionPane.showMessageDialog(FindFrame.this, 
                    "Искомая запись не найдена!", "AbonentGaz", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private class Queries extends dao_impl.QueriesDao{
        private final Object[] criteria;// критерий поиска
//        private Object[][] content;
//        private String[] columnName;
//        private Class[] columnClass;
        
        // класс для чтения свойств из файла свойств
        private final UserProperties props;
        private String sqlString;// строка-запрос на выборку

        public Queries() {
            super();
//            this.criteria = null;
            this.criteria = new Object[1];
            
            // создаём класс для чтения из файла свойств
            props = new UserProperties(queryfilename);
        }

        /**
         * возвращает данные, полученные в результате выполнения запроса
         * @return the content массив данных запроса
         */
        @Override
        public Object[][] getContent() {
            return super.getContent();
        }

        /**
         * возвращает имена столбцов запроса
         * @return the columnName массив имен столбцов
         */
        @Override
        public String[] getColumnName() {
            return super.getColumnName();
        }

        /**
         * возвращает типы (классы) данных столбцов запроса
         * @return the columnClass массив типов данных столбцов
         */
        @Override
        public Class[] getColumnClass() {
            return super.getColumnClass();
        }
        
        /**
         * Получает данные отбора по заданному критерию
         * @return true если набор содержит данные, в противном случае возвращает false
         * @param sqlString - строковое представление запроса
         */
        @Override
        public boolean getEntities(){
            return super.getEntities();
        }
        
        /**
         * считывает свойство с заданным ключом из файла свойств
         * @param index имя ключа из файла свойств
         * @return строковое представление запроса из свойства, определённого ключом
         */
        private String getQuery(int index){
            String retval;// возвращаемое значение строкового представления запроса
            retval = props.getProperty(String.valueOf(index));
            return retval;
            
        }


        /**
         * задаёт имя ключа из файла свойств
         * @param index the index to set
         */
        public void setIndex(int index) {
            sqlString = getQuery(index);// получаем строку - запрос из файла свойств
            super.setSqlQuery(sqlString);
//            System.out.println(sqlString);
        }

        /**
         * задаёт критерий выборки данных в запросе
         * @param criteria the criteria to set
         */
        public void setCriteria(Object criteria) {
//            this.criteria = new Object[1];
            this.criteria[0] = criteria;
            super.setCriteria(this.criteria);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton findButton;
    private javax.swing.JComboBox<String> findCombo;
    private javax.swing.JTable findTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField txtFind;
    // End of variables declaration//GEN-END:variables

    /**
     * @param parentFrame the parentFrame to set
     */
    public void setParentFrame(MDIObject parentFrame) {
        this.parentFrame = parentFrame;
    }
}
