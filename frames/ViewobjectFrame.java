/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import abonentgaz.ColumnModelListener;
import abonentgaz.TableCell_Renderer;
import abonentgaz.TableProperty;
import abonentgaz.UserProperties;
import dao_impl.TableDaoImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import runqueries.Runquery;

/**
 *
 * @author Sergii.Tushinskyi
 */
public class ViewobjectFrame extends javax.swing.JFrame {

    private TableDaoImpl objectDao;// объект доступа к данным
    private List<ObjectEntity> resultObject;// здесь хранятся первичные данные по объектам
    private ColumnModelListener tableListener;// слушатель изменений размеров столбцов
    private final String fileName = "viewobjectframe.properties";// имя файла свойств
    private UserProperties props;// класс для считывания свойств из файла свойств
    private TableProperty tprops;// класс для установки размеров столбцов таблицы
    private int idOrganization;// идентификатор организации, на которую изменяется принадлежность объектов
    private List<ObjectEntity> filterObject;// промежуточный объект для хранения результатов поиска и фильтра
    private final String[] columnName = new String[]{"№","Организация","Наименование объекта","Населённый пункт",
                "Улица","Адрес"};// наименования полей
    private final Class[] columnClass = new Class[]{Integer.class,String.class,String.class,String.class,String.class,String.class};
    private final int[] col = new int[5];// массив нередактируемых столбцов таблицы
    private final String sqlFullQuery = "select Ob.ID, Org.ORGANIZATION_NAME, Ob.NAMEOBJECT, " +
            "Spc.CITY_NAME, Sps.STREET_NAME, Ob.ADDRES from Organization Org inner join " +
            "Objects Ob on Org.ID=Ob.IDORGANIZATION inner join Sprcity Spc on " +
            "Ob.IDCITY=Spc.ID inner join Sprstreet Sps on Ob.IDSTREET=Sps.ID order by Org.ID;";
    private final String sqlOrganizationQuery = "select Ob.ID, Org.ORGANIZATION_NAME, Ob.NAMEOBJECT, " +
            "Spc.CITY_NAME, Sps.STREET_NAME, Ob.ADDRES from Organization " +
            "Org inner join Objects Ob on Org.ID=Ob.IDORGANIZATION inner join " +
            "Sprcity Spc on Spc.ID=Ob.IDCITY inner join Sprstreet Sps on " +
            "Sps.ID=Ob.IDSTREET where lower(Org.ORGANIZATION_NAME) like '%";
    private final String sqlAddresQuery = "select Ob.ID, Org.ORGANIZATION_NAME, Ob.NAMEOBJECT, Spc.CITY_NAME, " +
            "Sps.STREET_NAME, Ob.ADDRES from Organization Org inner join Objects Ob " +
            "on Org.ID=Ob.IDORGANIZATION inner join Sprcity Spc on Ob.IDCITY=Spc.ID " +
            "inner join Sprstreet Sps on Ob.IDSTREET=Sps.ID where " +
            "lower(Spc.CITY_NAME || ', ' || Sps.STREET_NAME || ', ' || Ob.ADDRES) like '%";
    private final String sqlNameQuery = "select Ob.ID, Org.ORGANIZATION_NAME, Ob.NAMEOBJECT, " +
            "Spc.CITY_NAME, Sps.STREET_NAME, Ob.ADDRES from Organization Org inner join " +
            "Objects Ob on Org.ID=Ob.IDORGANIZATION inner join Sprcity Spc on " +
            "Ob.IDCITY=Spc.ID inner join Sprstreet Sps on Ob.IDSTREET=Sps.ID where lower(Ob.NAMEOBJECT) like '%";
    private boolean change = false;// начальное значение флага изменения принадлежности
    
    /**
     * Creates new form ViewobjectFrame
     */
    public ViewobjectFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuRecord = new javax.swing.JMenu();
        mnuRecordChange = new javax.swing.JMenuItem();
        mnuRecordFind = new javax.swing.JMenu();
        mnuRecordFindAdress = new javax.swing.JMenuItem();
        mnuRecordFindName = new javax.swing.JMenuItem();
        mnuRecordFindReset = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Перечень объектов");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setPreferredSize(new java.awt.Dimension(138, 29));

        OKButton.setText("OK");
        OKButton.setToolTipText("изменить принадлежность объекта");
        OKButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("выход");
        CancelButton.setToolTipText("закрыть окно");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OKButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CancelButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelButton)
                    .addComponent(OKButton))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        mnuRecord.setText("Запись");

        mnuRecordChange.setText("Изменить принадлежность");
        mnuRecordChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRecordChangeActionPerformed(evt);
            }
        });
        mnuRecord.add(mnuRecordChange);

        mnuRecordFind.setText("Поиск записи");

        mnuRecordFindAdress.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuRecordFindAdress.setText("Поиск по адресу");
        mnuRecordFindAdress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRecordFindAdressActionPerformed(evt);
            }
        });
        mnuRecordFind.add(mnuRecordFindAdress);

        mnuRecordFindName.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuRecordFindName.setText("Поиск по названию");
        mnuRecordFindName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRecordFindNameActionPerformed(evt);
            }
        });
        mnuRecordFind.add(mnuRecordFindName);

        mnuRecordFindReset.setText("Сбросить критерий поиска");
        mnuRecordFindReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRecordFindResetActionPerformed(evt);
            }
        });
        mnuRecordFind.add(mnuRecordFindReset);

        mnuRecord.add(mnuRecordFind);

        jMenuBar1.add(mnuRecord);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // при нажатии кнопки ОК сначала запрашиваем у пользователя
        changeOrganization();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // при нажатии кнопки Отмена скрываем форму
        setVisible(false);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try{
            // создаём класс для чтения свойств
            props = new UserProperties(fileName);
            tprops = new TableProperty(jTable1);

//            // считываем размеры столбцов из файла свойств
//            String colWidth = props.getProperty("colwidth");
//
//            // и устанавливаем их для таблицы
//            tprops.setDefaultWidth(colWidth);
//            tprops.setColWidth();

            // задаём ширину столбцов таблицы
            MDIObject.setTablecolwidth(props, "colwidth", jTable1);
        } catch(Exception ex){
            Logger.getLogger(ViewobjectFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // создаём слушателя изменений размеров столбцов таблицы и добавляем его к таблице
        tableListener = new ColumnModelListener(jTable1, props, "colwidth");
        jTable1.getColumnModel().addColumnModelListener(tableListener);
        
        // добавляем рисовальщик для первого столбца таблицы и слушатель для запрета
        // доступа к этому столбцу
        TableCell_Renderer.setIntegerTableCellRenderer(jTable1, null);
        MDIObject.addColumnSelectionListener(jTable1);
        
        
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // удаляем слушателя
        jTable1.getColumnModel().removeColumnModelListener(tableListener);
        
        // закрываем все классы
        props = null;
        tprops = null;
        tableListener = null;
        objectDao = null;
        resultObject = null;
    }//GEN-LAST:event_formComponentHidden

    private void mnuRecordFindAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRecordFindAdressActionPerformed
        // поиск записи по адресу объекта
        // 1 - создаём промежуточный объект для хранения результатов поиска
        // 2 - перебираем все записи на предмет совпадения с шаблоном поиска
        // 3 - если обнаруживаем совпадение, найденую запись запоминаем в этом объекте
        // 4 - если результаты есть, для выбранных строк таблицы высоту оставляем той же
        // все остальные строки скрываем
        
        // окно ввода шаблона
        String template;
        template = JOptionPane.showInputDialog(this,"Введите образец для поиска", 
                "Поиск по адресу", JOptionPane.INFORMATION_MESSAGE);
        
        // проверяем введённые данные
        if(!template.isEmpty()){
            String sqlString = sqlAddresQuery + template + "%' order by Org.ID;";
            // считываем размеры столбцов из файла свойств
            String colWidth = tprops.getColWidth();
            
            getObjects(sqlString);
            // и устанавливаем их для таблицы
            tprops.setColWidth();
            jTable1.getColumnModel().addColumnModelListener(tableListener);
            
            mnuRecordFindReset.setEnabled(true);
        }
    }//GEN-LAST:event_mnuRecordFindAdressActionPerformed

    private void mnuRecordFindNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRecordFindNameActionPerformed
        // поиск записей по наименованию, выполняется также, как
        // и по адресу
        // окно ввода шаблона
        String template;
        template = JOptionPane.showInputDialog(this, "Введите образец для поиска", 
                "Поиск по названию", JOptionPane.QUESTION_MESSAGE);
        
        // проверяем введённые данные
        if(!template.isEmpty()){
            String sqlString = sqlNameQuery + template + "%' order by Org.ID;";
            // считываем размеры столбцов из файла свойств
            String colWidth = tprops.getColWidth();
            
            getObjects(sqlString);
            // и устанавливаем их для таблицы
            tprops.setColWidth();
            jTable1.getColumnModel().addColumnModelListener(tableListener);
            
            mnuRecordFindReset.setEnabled(true);
        }
    }//GEN-LAST:event_mnuRecordFindNameActionPerformed

    private void mnuRecordFindResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRecordFindResetActionPerformed
        // восстанавливаем исходные данные
        // считываем размеры столбцов из файла свойств
        String colWidth = tprops.getColWidth();

        getObjects(sqlFullQuery);
        // и устанавливаем их для таблицы
        tprops.setColWidth();
        jTable1.getColumnModel().addColumnModelListener(tableListener);

        mnuRecordFindReset.setEnabled(false);// блокируем пункт меню Сброс фильтра
    }//GEN-LAST:event_mnuRecordFindResetActionPerformed

    private void mnuRecordChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRecordChangeActionPerformed
        // изменяем принадлежность выбранного объекта
        changeOrganization();
    }//GEN-LAST:event_mnuRecordChangeActionPerformed

    private void mnuRecordFindOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRecordFindOrganizationActionPerformed
        // поиск записей по наименованию организации выполняется также, как
        // и по адресу
        // окно ввода шаблона
        String template;
        template = JOptionPane.showInputDialog(this, "Введите образец для поиска", 
                "Поиск организации", JOptionPane.QUESTION_MESSAGE);
        
        // проверяем введённые данные
        if(!template.isEmpty()){
            String sqlString = sqlOrganizationQuery + template + "%' order by Org.ID;";
            
            // считываем размеры столбцов из файла свойств
            String colWidth = tprops.getColWidth();
            
            getObjects(sqlString);
            // и устанавливаем их для таблицы
            tprops.setColWidth();
            jTable1.getColumnModel().addColumnModelListener(tableListener);
            
            mnuRecordFindReset.setEnabled(true);
        }
    }//GEN-LAST:event_mnuRecordFindOrganizationActionPerformed

    /**
     * заполнение таблицы данными и установка размеров столбцов
     */
    private void setcolwidth(){
        // считываем размеры столбцов из файла свойств
        String colWidth = tprops.getColWidth();

        // и устанавливаем их для таблицы
        tprops.setColWidth();
        jTable1.getColumnModel().addColumnModelListener(tableListener);
    }
    
    private void changeOrganization(){
        int button = JOptionPane.showConfirmDialog(ViewobjectFrame.this, 
                "Изменить принадлежность выбранного объекта?", "AbonentGaz", JOptionPane.YES_NO_OPTION);
        // проверяем выбор пользователя
        if(button == JOptionPane.YES_OPTION){
            int row = jTable1.getSelectedRow();// номер выбранной строки в таблице
            // получаем экземпляр выбранной сущности
            ObjectEntity entity = resultObject.get(row);
//            System.out.println("index=" + entity.getIndex());
            if(entity.setIdOrganization(idOrganization)){
                MDIObject.getInformDialog(ViewobjectFrame.this, 
                        "Change...", InformDialog.InformType.SAVING);// задаём новое значение кода организации
                change = true;// устанавливаем флаг изменения принадлежности
            }
            else
                JOptionPane.showMessageDialog(null, 
                        "Произошли ошибки во время операции сохранения!", 
                        "AbonentGaz", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | 
                IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewobjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ViewobjectFrame().setVisible(true);
            }
        });
    }
    
    /**
     * класс для реализации сущности объектов с выбранными свойствами
     */
    private class ObjectEntity{
        
        private final int index;// индекс сущности в коллекции (порядковый номер)
        private int idOrganization;// идентификатор организации
        private int id;// идентификатор объекта
        private String name;// наименование объекта
        private String city;// населённый пункт
        private String street;// улица
        private String addres;// адрес
        private String organization;// наименование организации

        public ObjectEntity(int index) {
            this.index = index;
        }
        

        /**
         * @param id the id to set
         */
        public void setId(int id) {
            this.id = id;
        }

        /**
         * @param name the name to set
         */
        public void setName(String name) {
            this.name = name;
        }

        /**
         * @param city the city to set
         */
        public void setCity(String city) {
            this.city = city;
        }

        /**
         * @param street the street to set
         */
        public void setStreet(String street) {
            this.street = street;
        }

        /**
         * @param addres the addres to set
         */
        public void setAddres(String addres) {
            this.addres = addres;
        }
        
        public Object[] toDataArray(){
            Object[] result = new Object[6];
            result[0] = index;
            result[1] = organization;
            result[2] = name;
            result[3] = city;
            result[4] = street;
            result[5] = addres;
            return result;
        }
        
        /**
         * Проверяет строку на наличие в ней другой подстроки - шаблона
         * @param template шаблон для сравнения
         * @return true если совпадение найдено, в противном случае false
         */
        public boolean containsAddres(String template){
            String fullAddres;
            CharSequence cs = template.subSequence(0, template.length());
            fullAddres = (city + ", " + street + ", " + addres).toLowerCase();
            return fullAddres.contains(cs);
        }
        
        /**
         * Проверяет строку на наличие в ней другой подстроки - шаблона
         * @param template шаблон для сравнения
         * @return true если совпадение найдено, в противном случае false
         */
        public boolean containsName(String template){
            CharSequence cs = template.subSequence(0, template.length());
            return name.toLowerCase().contains(cs);
        }
        
        public boolean containsOrganization(String template){
            CharSequence cs = template.subSequence(0, template.length());
            return organization.toLowerCase().contains(cs);
        }

        /**
         * @param idOrganization the idOrganization to set
         */
        public boolean setIdOrganization(int idOrganization) {
            this.idOrganization = idOrganization;
            return changeOrganization();
            
        }
        
        private boolean changeOrganization(){
            // строка - запрос на изменение записи
            String sqlOrganizationQuery = "UPDATE OBJECTS B SET B.IDORGANIZATION=" + 
                    idOrganization + " WHERE B.ID=" + id + ";";
            System.out.println("sql=" + sqlOrganizationQuery);
            Runquery rq = new Runquery();// объект для выполнения запросов
            
            // проверяем результат выполнения запроса на обновление записи
            // обновление данных возвращает false, поэтому мы проверяем флаг NOT FALSE
            return !rq.updateFieldValue(sqlOrganizationQuery);
            
        }

        /**
         * @return the index
         */
        public int getIndex() {
            return index;
        }

        /**
         * @param organization the organization to set
         */
        public void setOrganization(String organization) {
            this.organization = organization;
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton OKButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenu mnuRecord;
    private javax.swing.JMenuItem mnuRecordChange;
    private javax.swing.JMenu mnuRecordFind;
    private javax.swing.JMenuItem mnuRecordFindAdress;
    private javax.swing.JMenuItem mnuRecordFindName;
    private javax.swing.JMenuItem mnuRecordFindReset;
    // End of variables declaration//GEN-END:variables

    /**
     * @param idOrganization the idOrganization to set
     */
    public void setIdOrganization(int idOrganization) {
        this.idOrganization = idOrganization;
        getObjects(sqlFullQuery);
    }
    
    private void getObjects(String query){
        Runquery rq = new Runquery();// объект для выполнения запросов
//        System.out.println(query);
        List<Object[]> entities = rq.getQueryEntities(query);// получаем данные при выполнении запроса
        
        // проверяем их наличие
        int count = entities.size();
        if(count > 0){
            resultObject = new ArrayList<>();
            Object[][] content = new Object[count][];// определяем размер массива для заполнения таблицы
            for(int i = 0; i < col.length; i++)
                col[i] = i;
            for(int i = 0; i < count; i++){
                Object[] ent = entities.get(i);
                // создаём экземпляр коллекции
                ObjectEntity entity = new ObjectEntity((int) ent[0]);
                // получаем данные по этому экземпляру для заполнения таблицы
                entity.setId(Integer.parseInt((String) ent[1]));
                entity.setOrganization((String) ent[2]);
                entity.setName((String) ent[3]);
                entity.setCity((String) ent[4]);
                entity.setStreet((String) ent[5]);
                entity.setAddres((String) ent[6]);
                resultObject.add(entity);// добавляем в коллекцию
                content[i] = entity.toDataArray();
            }
            
            // создаём модель и заполняем данными таблицу
            MyTableModel Model = new MDIObject.MyTableModelImpl(content, columnName, columnClass);
            jTable1.getColumnModel().removeColumnModelListener(tableListener);
            MDIObject.fullTableData(col, Model, jTable1);
            // задаём перенос по словам в ячейках таблицы
            TableCell_Renderer.setWordWrapCellRenderer(jTable1, columnClass);
        }
    }

    /**
     * @return the change
     */
    public boolean isChange() {
        return change;
    }

}
