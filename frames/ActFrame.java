/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import abonentgaz.ConvertNumber;
import abonentgaz.FrameLayoutManager;
import dao_impl.SpryearDaoImpl;
import entities.Spryear;
import java.awt.CardLayout;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author lera
 */
public class ActFrame extends javax.swing.JFrame {

    /**
     * @param nameOrganization the nameOrganization to set
     */
    public void setNameOrganization(String nameOrganization) {
        this.nameOrganization = nameOrganization;
    }

    /**
     * @param Director the Director to set
     */
    public void setDirector(String Director) {
        this.Director = Director;
    }

    private CardLayout clManager;// менеджер карточной компоновки для панели
    private PrintSetupPanel printPanel = null;
    private ShowCountPanel countPanel = null;
    private int idCompany;
    private ConvertNumber converter;
//    private Font f;
//    private FontRenderContext context;
//    private Rectangle2D bound;
//    private double stringWidth;// ширина текста
    private AffineTransform atf;
    private String[] monthReport;// изменённые наименования месяцев отчёта
    private FrameLayoutManager flManager;// менеджер расположения и размеров формы
    private int currentMonth;// текущий месяц
    private SpryearDaoImpl yearDao;// объект доступа к справочнику лет
    private String nameOrganization;
    private String Director;
    private String Agreement;
    private PreviewActFrame previewframe;// окно предварительного просмотра
    private JLabel lblView;// метка, на которой будет выводиться текст с актом и таблицей
    
    /**
     * Creates new form ActFrame
     */
    public ActFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFlow = new javax.swing.JTextField();
        txtPTP = new javax.swing.JTextField();
        cmbMonth = new javax.swing.JComboBox();
        cmbYear = new javax.swing.JComboBox();
        txtReportDate = new javax.swing.JTextField();
        lblFlow = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        mnuPrintDoc = new javax.swing.JMenuItem();
        mnuPrintSetupMore = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        chkmenuSetupAutoCalc = new javax.swing.JCheckBoxMenuItem();
        chkmenuSetupAutoSave = new javax.swing.JCheckBoxMenuItem();
        mnuFileTableshow = new javax.swing.JCheckBoxMenuItem();
        mnuFileSave = new javax.swing.JMenuItem();
        mnuFilePreview = new javax.swing.JMenuItem();
        mnuFileExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Акт приёма-передачи");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Объём");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ПТП");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Отчётные месяц и год");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Дата отчёта");

        txtFlow.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtPTP.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь" }));
        cmbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthActionPerformed(evt);
            }
        });

        cmbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearActionPerformed(evt);
            }
        });

        txtReportDate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtReportDate.setText("31 сентября 2020 г");

        lblFlow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFlow.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblFlow.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblFlow.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        jMenu1.setText("Файл");

        jMenu3.setText("Печать");

        mnuPrintDoc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mnuPrintDoc.setText("Документ");
        mnuPrintDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrintDocActionPerformed(evt);
            }
        });
        jMenu3.add(mnuPrintDoc);

        mnuPrintSetupMore.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mnuPrintSetupMore.setText("Дополнительно");
        mnuPrintSetupMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrintSetupMoreActionPerformed(evt);
            }
        });
        jMenu3.add(mnuPrintSetupMore);

        jMenu1.add(jMenu3);

        jMenu4.setText("Настройки");

        chkmenuSetupAutoCalc.setSelected(true);
        chkmenuSetupAutoCalc.setText("Автовычисление");
        chkmenuSetupAutoCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkmenuSetupAutoCalcActionPerformed(evt);
            }
        });
        jMenu4.add(chkmenuSetupAutoCalc);

        chkmenuSetupAutoSave.setText("Автосохранение показаний");
        chkmenuSetupAutoSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkmenuSetupAutoSaveActionPerformed(evt);
            }
        });
        jMenu4.add(chkmenuSetupAutoSave);

        jMenu1.add(jMenu4);

        mnuFileTableshow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        mnuFileTableshow.setText("Таблица показаний");
        mnuFileTableshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileTableshowActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFileTableshow);

        mnuFileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuFileSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/saveHS.png"))); // NOI18N
        mnuFileSave.setText("Сохранить");
        mnuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFileSave);

        mnuFilePreview.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mnuFilePreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/find16.png"))); // NOI18N
        mnuFilePreview.setText("Предварительный просмотр");
        mnuFilePreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFilePreviewActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFilePreview);

        mnuFileExit.setText("Выход");
        mnuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFileExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFlow, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPTP, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtReportDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(lblFlow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReportDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFlow, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // задаём размеры формы при отображении на экране
        flManager = new FrameLayoutManager("actframe.properties");
        setSize(flManager.getWidth(), 152);
        setLocation(flManager.setFrameLocation());
        // создаём менеджер карточной компоновки для панели
        clManager = new CardLayout();
        jPanel1.setLayout(clManager);
        jPanel1.setVisible(false);
        // создаём панели с показанимяи и дополнительными установками печати
        printPanel = new PrintSetupPanel();
        countPanel = new ShowCountPanel();
        // добавляем их на панель
        jPanel1.add(printPanel, "SetupPrintPanel");
        jPanel1.add(countPanel, "CountPanel");
        
        // заполняем список изменённых наименований месяцев отчёта
        String [] month = {"января","февраля","марта","апреля","мая","июня",
            "июля","августа","сентября","октября","ноября","декабря"};
        monthReport = month;
        
        // создаём объект доступа к справочнику лет для заполнения списка
        yearDao = new SpryearDaoImpl();
        
        // определяем текущий год и сравниваем его с данными из справочника
        GregorianCalendar now = new GregorianCalendar();
        int year = now.get(Calendar.YEAR);
        boolean find = false;// флаг поиска записи
        for(int i = 0; i < yearDao.getCount(); i++){
            short y = yearDao.getItem(i).getNameYear();
//            System.out.println("year=" + y);
            if(year == (int) y){
                find = true;
                break;
            }
        }
        // проверяем результат сравнения, если совпадение не найдено
        // уведомляем пользователя о необходимости добавить запись с новым годом
        if(find != true)
            JOptionPane.showMessageDialog(null, "В справочнике отсутствует запись с текущим годом отчёта.\n" +
                    "Добавьте новую запись.");
        // заполняем список лет - начинается с 2015 года
        for (int i = 0; i < yearDao.getCount(); i++){
            short y = yearDao.getItem(i).getNameYear();
            cmbYear.addItem(y);
        }
        // определяем текущий месяц и показываем его в списке
        currentMonth = now.get(Calendar.MONTH);
        cmbMonth.setSelectedIndex(currentMonth);
        
        // выводим в списке последний год
        cmbYear.setSelectedIndex(yearDao.getCount() - 1);
        
        
        // создаём переводчик
        converter = new ConvertNumber(ConvertNumber.Language.LANGRUSS);
        
        // создаём слушатель документа для отслеживания изменений в поле ввода
        DocumentListener docListener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                convertNumberToString();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                convertNumberToString();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                convertNumberToString();
            }
        };
        // и добавляем его к полю ввода объёма
        txtFlow.getDocument().addDocumentListener(docListener);
        
        // создаём слушатель изменений в таблице показаний и передаём его полю ввода
        countPanel.addPropertyChangeListener("name", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent pce) {
                //To change body of generated methods, choose Tools | Templates.
                txtFlow.setText(Integer.toString(countPanel.getFlowRate()));
            }
        });
        // получаем шрифт, которым отображается текст на метке
//        f = lblFlow.getFont();
        atf = new AffineTransform();
        // получаем графический объект, которым рисует метка
//        context = new FontRenderContext(atf, true, true);
        JOptionPane.showMessageDialog(null, "Для автоматического сохранения показаний установите \n" +
                "флажок <Файл->Настройки->Автосохранение показаний>", "AbonentGaz", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_formComponentShown

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
            // при перемещении формы записываем новое местоположение в файл свойств
        if(flManager != null){
            try {
                flManager.getFrameLocation(this);
            } catch (Exception ex) {
                Logger.getLogger(ActFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formComponentMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // при изменении размеров формы записываем их в файл свойств
        if(flManager != null){
            try {
                // записываем в файл только изменение ширины формы
                flManager.setWidth(this.getWidth());
                
            } catch (Exception ex) {
                Logger.getLogger(ActFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // заодно корректируем перевод текста метки
        if(txtFlow.getText().length() > 0) convertNumberToString();
    }//GEN-LAST:event_formComponentResized

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
        previewframe.setVisiblePreview(false);
        previewframe = null;
    }//GEN-LAST:event_formComponentHidden

    private void mnuFileTableshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileTableshowActionPerformed
        // если установлен флажок показываем или скрываем таблицу показаний
        if(mnuFileTableshow.isSelected()){
            // снимаем флажок с меню дополнительных настроек печати
            mnuPrintSetupMore.setSelected(false);
            showPanel("CountPanel");// показываем панель с таблицей показаний
            set_CompanyFilter();// заполняем таблицу показаний
        } else{
            this.setSize(getWidth(), 152);
            jPanel1.setVisible(false);
        }
    }//GEN-LAST:event_mnuFileTableshowActionPerformed

    private void mnuPrintSetupMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPrintSetupMoreActionPerformed
        // если установлен флажок показываем или скрываем панель дополнительных
        // настроек печати
        if(mnuPrintSetupMore.isSelected()){
            // снимаем флажок с меню таблицы показаний
            mnuFileTableshow.setSelected(false);
            showPanel("SetupPrintPanel");
        } else{
            this.setSize(getWidth(), 152);
            jPanel1.setVisible(false);
        }
    }//GEN-LAST:event_mnuPrintSetupMoreActionPerformed

    private void cmbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthActionPerformed
        // при выборе месяца изменяем изменяем дату отчёта
        
        currentMonth = cmbMonth.getSelectedIndex();
        if(countPanel.isVisible()) countPanel.setReportMonth(currentMonth);
        setreportDate();
    }//GEN-LAST:event_cmbMonthActionPerformed

    private void cmbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearActionPerformed
        // при выборе месяца изменяем изменяем дату отчёта
        Spryear entity = yearDao.getItem(cmbYear.getSelectedIndex());
        short y = entity.getNameYear();
        
        if(countPanel.isVisible()) countPanel.setReportYear(entity.getId());
        
        setreportDate();
    }//GEN-LAST:event_cmbYearActionPerformed

    private void mnuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuFileSaveActionPerformed

    private void chkmenuSetupAutoCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkmenuSetupAutoCalcActionPerformed
        // устанавливаем или снимаем флаг автовычисления расхода
        countPanel.setAutoCalc(chkmenuSetupAutoCalc.isSelected());
    }//GEN-LAST:event_chkmenuSetupAutoCalcActionPerformed

    private void chkmenuSetupAutoSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkmenuSetupAutoSaveActionPerformed
        // устанавливаем или снимаем флаг автосохранения показаний
        countPanel.setAutoSave(chkmenuSetupAutoSave.isSelected());
    }//GEN-LAST:event_chkmenuSetupAutoSaveActionPerformed

    private void mnuFilePreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFilePreviewActionPerformed
        // отображаем окно предварительного просмотра
//        PreviewActFrame frame = new PreviewActFrame();
//        frame.setVisible(true);

        setActParameters();// получаем список параметров для передачи на форму предварительного просмотра
//        PreviewActFrame previewframe = new PreviewActFrame(PreviewActFrame.PaperOrient.PortraitOrient, PreviewActFrame.ActMode.ActPP);
//        previewframe.setFullAct(printPanel.isHalfAct());
        previewframe.setViewComponent(lblView);
        previewframe.setCopies(1);
        previewframe.setVisiblePreview(true);
//        frmPreviewAct.setVisiblePreview();
    }//GEN-LAST:event_mnuFilePreviewActionPerformed

    private void mnuPrintDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPrintDocActionPerformed
        setActParameters();
        // создаём объект для работы с принтером
        previewframe.setViewComponent(lblView);
        previewframe.setCopies(1);
//        previewframe.setVisiblePreview(true);
        previewframe.doPrintAct();
    }//GEN-LAST:event_mnuPrintDocActionPerformed

    private void mnuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileExitActionPerformed
        // закрываем форму
        this.setVisible(false);
    }//GEN-LAST:event_mnuFileExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // закрываем форму
        if(previewframe != null) {
            previewframe.setVisiblePreview(false);
            previewframe = null;
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * задаёт параметры для отображения в окне предварительного просмотра
     */
    private void setActParameters() {
        Object[] param = new Object[7];
        String reportMonth;// отчётный месяц
        String month = cmbMonth.getSelectedItem().toString();
        String ending = month.substring(month.length() - 1);// получаем окончание месяца
        // проверяем его
        if (ending.equals("ь") || ending.equals("й")) {
            reportMonth = month.substring(0, month.length() - 1) + "е";
        } else {
            reportMonth = month + "е";
        }
        // отображаем окно предварительного просмотра
        if (previewframe == null)
            previewframe = new PreviewActFrame(PreviewActFrame.PaperOrient.PortraitOrient, PreviewActFrame.ActMode.ActPP);
        
        param[0] = Agreement;// договор
        param[1] = txtReportDate.getText();// дата отчёта
        param[2] = nameOrganization;// наименование организации
        param[3] = Director;// руководитель
        param[4] = reportMonth + " " + cmbYear.getSelectedItem().toString() + " года";// отчётный период
        param[5] = txtFlow.getText();// объём числом
        param[6] = converter.getNumText();// объём словами
//        previewframe.setParameters(param);// передаём параметры в окно просмотра
        // при передаче содержимого таблицы нужно удалить данные столбца № Счётчика
        Object[][] content = null;
        if(countPanel.isVisible()) {
            // если таблица показаний отображается, то формируем данные для передачи
            Object[][] tableContent = countPanel.getContent();
            content = new Object[tableContent.length][6];// размер массива содержимого
            for(int j = 0; j < tableContent.length; j++) {
                content[j][0] = tableContent[j][0];
                content[j][1] = tableContent[j][2];
                content[j][2] = tableContent[j][3];
                content[j][3] = tableContent[j][4];
                content[j][4] = tableContent[j][5];
                content[j][5] = tableContent[j][6];
            }
        }
//        previewframe.setTableContent(content);// передаём содержимое таблицы
        lblView = lblContent(param, content);
        
    }
    
    
    private void showPanel(String panelName){
        // увеличиваем высоту формы
        this.setSize(getWidth(), 300);
        // устанавливаем видимость панели
        jPanel1.setVisible(true);
        clManager.show(jPanel1, panelName);
    }
    
    private void convertNumberToString(){
        converter.setValue(txtFlow.getText());
        String convertString = converter.getNumText();
        /* при изменении текста метки сравниваем длину текста и длину метки
         * и, при необходимости, выполняем перенос части текста, которая
         * не помещается по длине метки
         */
        lblFlow.setText("<html><body><p align='justify'>" + convertString + "</body></html>");

    }
    
    /**
     * изменяет дату отчёта в зависимости от выбранных месяца и года
     */
    private void setreportDate(){
        txtReportDate.setText(monthReport[cmbMonth.getSelectedIndex()] +
            " " + cmbYear.getSelectedItem().toString() + " г.");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | 
                javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ActFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem chkmenuSetupAutoCalc;
    private javax.swing.JCheckBoxMenuItem chkmenuSetupAutoSave;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFlow;
    private javax.swing.JMenuItem mnuFileExit;
    private javax.swing.JMenuItem mnuFilePreview;
    private javax.swing.JMenuItem mnuFileSave;
    private javax.swing.JCheckBoxMenuItem mnuFileTableshow;
    private javax.swing.JMenuItem mnuPrintDoc;
    private javax.swing.JCheckBoxMenuItem mnuPrintSetupMore;
    private javax.swing.JTextField txtFlow;
    private javax.swing.JTextField txtPTP;
    private javax.swing.JTextField txtReportDate;
    // End of variables declaration//GEN-END:variables

    /**
     * @param idCompany the idCompany to set
     */
    public void setIdCompany(int idCompany) {
        this.idCompany = idCompany;
        set_CompanyFilter();// выборка данных по идентификатору компании
    }
    
    /**
     * выбирает данные по идентификатору компании
     */
    private void set_CompanyFilter(){
        if(countPanel != null){
            // проверяем изменения данных в таблице
            if(countPanel.isChangeData()){
                
                countPanel.saveShow();
                
            }
            if(countPanel.isVisible()){
                // если панель с таблицей показаний видима, получаем данные из
                // таблицы закрытия месяца и заполняем таблицу
                countPanel.setReportMonth(currentMonth);
                countPanel.Showcount(idCompany);
                
            }
        }
    }
    
    

    /**
     * @param Agreement the Agreement to set
     */
    public void setAgreement(String Agreement) {
        this.Agreement = Agreement;
    }
    
    
    private JLabel lblContent(Object[] parameters, Object[][] tableContent) {
        JLabel lblContent = new JLabel();
        
//                lblView.setPreferredSize(dmnsn);
//                lblView.setMaximumSize(dmnsn);
//            lblView.setBorder(new LineBorder(Color.BLACK));
        lblContent.setHorizontalAlignment(SwingConstants.CENTER);
        lblContent.setVerticalAlignment(SwingConstants.TOP);
        Font font = lblContent.getFont();// получаем шрифт, используемый меткой
        lblContent.setFont(new Font(font.getFontName(), font.getStyle(), 9));
        String txtHeader = "<html>" +
            "<head>" +
                "<meta charset=\"windows-1251\">\n" +
                "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" +
            "</head>" +
            "<body>" +
                "<p></p>" +
                "<p></p>";
        String txtFooter = "</body></html>";
        String lblText = getContentString(565, parameters, tableContent);// текст для вывода на метке
        lblContent.setText(txtHeader + lblText + txtFooter);// задаём текст
        System.out.println("lblContentHeight=" + lblContent.getPreferredSize().getHeight());
        /*
        проверяем высоту метки после вывода текста, т. к. нам нужно вывести
        один или два экземпляра акта в зависимости от параметра IsHalfAct и высоты листа
        формата А4
        */
        if(lblContent.getPreferredSize().getHeight() <= 421) {
            /*
            если полученная в результате метка имеет высоту меньше или равно 421
            (421 - половина высоты листа бумаги формата А4), то можем вывести ещё
            один экземпляр акта на метку, добавляя дополнительное раделение
            */
            String txtSeparator = "<p></p><p></p>";
            lblContent.setText(txtHeader + lblText + txtSeparator + lblText + txtFooter);
        }
        return lblContent;
    }
    
    private String getContentString(int pWidth, Object[] parameters, Object[][] tableContent) {
        String string = "<table border=\"0\" cellspacing=\"0\" cellpadding=\"5\" align=\"center\" cols=\"2\" width=\"" +
                    pWidth + "\">" +
                    "<tr>" +
                        "<td colspan=\"2\" align=\"center\">АКТ</td>" +
                    "</tr>" +
                    "<tr height=\"20\"><td></td><td></td></tr>" +
                    "<tr>" +
                        "<td colspan=\"2\" align=\"left\">Приёма-передачи " +
                        "поставленного и протранспортированного природного газа по договору " +
                        parameters[0] + "</td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td align=\"left\">г. Алчевск</td><td align=\"right\">" + parameters[1] + "</td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td colspan=\"2\" align=\"justify\">" +
                            "Алчевское МРУЭГХ филиал ГУП \"Луганскгаз\" (далее - Поставщик) в " +
                            "лице Главного инженера Алчевского МРУЭГХ Громика Андрея Игоревича, который действует на " +
                            "основании доверенности №424 от 12.11.2019, представитель " +
                            parameters[2] +
                            ", далее Потребитель, в лице " +
                            parameters[3] +
                            ", составили данный акт в том, что в " +
                            parameters[4] + " Поставщик поставил и протранспортировал " + 
                            parameters[5] +
                            " куб м, Потребитель принял и использовал природный газ объёмом " +
                            parameters[5] + " (" + parameters[6] +
                            ") куб м. Данный акт составлен в 2-х экземплярах по 1 каждой стороне. " +
                            "Все экземпляры идентичны и имеют однинаковую юридическую силу." +
                        "</td>" +
                    "</tr>" +
                "</table>" +
                "<p></p>" +
                getActTableData(pWidth, tableContent) +
                "<table border=\"0\" align=\"center\" cols=\"2\" width=\"" + pWidth + "\">" +
                    "<tr>" +
                        "<td width=\"50%\" align=\"center\">Представитель Потребителя</td>" +
                        "<td align=\"center\">Представитель Поставщика</td>" +
                    "</tr>" +
                    "<tr height=\"20\"><td></td><td></td></tr>" +
                    "<tr>" +
                        "<td width=\"50%\"></td>" +
                        "<td align=\"center\">_________/А. И. Громик/</td>" +
                    "</tr>" +
                "</table>";
        
        return string;
    }
    
    /**
     * Формирует строку HTML кода из данных таблицы
     * @return строку в формате HTML
     */
    private String getActTableData(int pWidth, Object[][] tableContent) {
        // проверяем установку флага fullAct
        if(printPanel.isHalfAct() == false) {
            // установлена печать полной формы акта
            // получаем данные о содержании таблицы и формируем строку HTML
            if(tableContent != null) {
                
                String result = "<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\" align=\"center\" cols=\"6\" width=\"" +
                            (pWidth - 10) + "\">" +
                            "<thead>" +
                            "<th width=\"40%\">Адрес объекта газопотребления</th>" +
                            "<th width=\"14%\">Пок-ние на конец месяца</th>" +
                            "<th width=\"14%\">Пок-ние на начало месяца</th>" +
                            "<th width=\"12%\">Коэф-т привед. к с/у</th>" +
                            "<th width=\"5%\">ПТП</th>" +
                            "<th>Исполь-ный объём всего за месяц, м3</th>" +
                        "</thead>" + getTableData(tableContent);
                Object[] tableContent2 = tableContent[tableContent.length - 1];
                String resString = "<tr><td colspan=\"5\" align=\"left\">Всего, м3</td><td align=\"center\">" + 
                        tableContent2[5] + "</td></tr>" + "</table>" +
                "<p></p>";
                result = result + resString;// соединяем полученные даннные из таблицы и итоговую строку
                return result;
            } else return "";
        } else {
            return "";
        }
    }
    
    /**
     * Формирует строку HTML - кода по данным таблицы
     * @return полученная строка в формате HTML с данными таблицы
     */
    private String getTableData(Object[][] tableContent) {
        // получаем данные о содержании таблицы и формируем строку HTML
        String result = "";
        for (int i = 0; i < tableContent.length - 1; i ++) {
            Object[] tableContent1 = tableContent[i];
            String rowString = "";
            for (Object tableContent11 : tableContent1) {
                rowString = rowString + "<td align=\"center\">" + tableContent11 + "</td>";
            }
            String htmlString = "<tr>" + rowString + "</tr>";
//                System.out.println("html- " + htmlString);
            result = result + htmlString;
        }
        return result;
    }
}
