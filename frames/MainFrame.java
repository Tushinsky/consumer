/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import abonentgaz.FrameLayoutManager;
import dao_impl.OrganizationDaoImpl;
import dao_impl.SprcategoryDaoImpl;
import entities.Organization;
import entities.TableEntity;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyVetoException;
import java.net.URL;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import runqueries.Runquery;

/**
 *
 * @author Сергей
 */
public class MainFrame extends javax.swing.JFrame {
    private MDIObject parentFrame;// главное окно приложения для получения соединения
    private InformFrame frminform;// окно информации
    private ObjectFrame frmobject;// окно объектов
    private CompanyList Company;// источник данных из таблицы Перечень
    private String oldValue;// старое значение в полях ввода для операций обновления
//    private ArrayList idList;// массив для хранения списка кодов категории
//    private ArrayList nameList;// массив для хранения списка наименований категорий
    private JList lstCategory;// элемент Список для отображения категорий
    private final FrameLayoutManager flManager;// класс для чтения свойств из файла свойств
    private Organization Organization;// текущая организация из перечня Компаний
    private ActFrame frmAct;
    private JScrollPane lstPane;// полоса прокуртки для списка категорий
    private int idCompany = 0;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        // считываем координаты формы из файла свойств
        flManager = new FrameLayoutManager("mainframe.properties");
        // устанавливаем местоположение
        super.setLocation(flManager.setFrameLocation());
        
        //задаём иконку для фрейма
        URL url = MainFrame.class.getClassLoader().getResource("Images/book.png");
        Image image = new ImageIcon(url).getImage();
        if (image!=null) super.setIconImage(image);
        super.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e); //To change body of generated methods, choose Tools | Templates.
                    // при закрытии формы закрываем и другие зависимые от неё формы
                    if(frminform != null) frminform.setVisible(false);
                    if(frmobject != null) frmobject.setVisible(false);
                    if(frmAct != null) frmAct.setVisible(false);
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCompanyName = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDirector = new javax.swing.JTextArea();
        txtDogovor = new javax.swing.JTextField();
        txtUstav = new javax.swing.JTextField();
        txtEGRUL = new javax.swing.JTextField();
        chkStamp = new javax.swing.JCheckBox();
        txtDate = new javax.swing.JFormattedTextField();
        btnFirst = new javax.swing.JButton();
        btnPreviouse = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblRecord = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        btnCategory = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        findButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(15, 32767));
        exitButton = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuFind = new javax.swing.JMenuItem();
        mnuInform = new javax.swing.JMenuItem();
        mnuObject = new javax.swing.JMenuItem();
        mnuAct = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnuAppendix = new javax.swing.JMenu();
        mnuAppendixItem1 = new javax.swing.JMenuItem();
        mnuAppendixItem2 = new javax.swing.JMenuItem();
        mnuAppendixItem3 = new javax.swing.JMenuItem();
        mnuAppendixItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();
        mnuRecord = new javax.swing.JMenu();
        mnuRecAdd = new javax.swing.JMenuItem();
        mnuRecDelete = new javax.swing.JMenuItem();
        mnuRecSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuRecFilter = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Главная");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Номер");

        jLabel2.setText("Наименование");

        jLabel3.setText("Руководитель");

        jLabel4.setText("Договор");

        jLabel5.setText("Дата заключения");

        jLabel6.setText("Устав");

        jLabel7.setText("Код ЕГРЮЛ");

        jLabel9.setText("Категория");

        txtID.setEditable(false);
        txtID.setColumns(4);
        txtID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtID.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIDFocusGained(evt);
            }
        });

        txtCompanyName.setColumns(20);
        txtCompanyName.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtCompanyName.setLineWrap(true);
        txtCompanyName.setRows(5);
        txtCompanyName.setWrapStyleWord(true);
        txtCompanyName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCompanyNameFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(txtCompanyName);

        txtDirector.setColumns(20);
        txtDirector.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtDirector.setLineWrap(true);
        txtDirector.setRows(5);
        txtDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDirectorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDirectorFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(txtDirector);

        txtDogovor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDogovor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDogovorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDogovorFocusLost(evt);
            }
        });

        txtUstav.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtUstav.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUstavFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUstavFocusLost(evt);
            }
        });

        txtEGRUL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtEGRUL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEGRULFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEGRULFocusLost(evt);
            }
        });

        chkStamp.setText("Печать");
        chkStamp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkStampStateChanged(evt);
            }
        });
        chkStamp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkStampFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                chkStampFocusLost(evt);
            }
        });
        chkStamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkStampActionPerformed(evt);
            }
        });

        txtDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM))));
        txtDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDateFocusLost(evt);
            }
        });

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NavBack.png"))); // NOI18N
        btnFirst.setToolTipText("к первой записи");
        btnFirst.setActionCommand("MoveFirst");

        btnPreviouse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/GoToPreviousRecord.png"))); // NOI18N
        btnPreviouse.setToolTipText("к предыдущей записи");
        btnPreviouse.setActionCommand("MovePreviouse");
        btnPreviouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviouseActionPerformed(evt);
            }
        });

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NavForward.png"))); // NOI18N
        btnLast.setToolTipText("к последней записи");
        btnLast.setActionCommand("MoveLast");

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/GoToNextRecord.png"))); // NOI18N
        btnNext.setToolTipText("к следующей записи");
        btnNext.setActionCommand("MoveNext");

        lblRecord.setBackground(new java.awt.Color(255, 255, 255));
        lblRecord.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblRecord.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblRecord.setOpaque(true);

        txtCategory.setEditable(false);
        txtCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow_2_down_round.PNG"))); // NOI18N
        btnCategory.setToolTipText("нажмите показать список категорий");
        btnCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCategoryActionPerformed(evt);
            }
        });

        jToolBar1.setRollover(true);

        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/camera.png"))); // NOI18N
        findButton.setToolTipText("найти");
        findButton.setFocusable(false);
        findButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        findButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(findButton);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NewDocumentHS.png"))); // NOI18N
        addButton.setToolTipText("новая запись");
        addButton.setFocusable(false);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addButton);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/DeleteHS.png"))); // NOI18N
        deleteButton.setToolTipText("удалить запись");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/saveHS.png"))); // NOI18N
        saveButton.setToolTipText("сохранить запись");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);
        jToolBar1.add(filler2);
        jToolBar1.add(filler4);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/exit.png"))); // NOI18N
        exitButton.setToolTipText("выход");
        exitButton.setFocusable(false);
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exitButton);
        jToolBar1.add(filler3);
        jToolBar1.add(filler5);

        jMenu1.setText("Потребитель");

        mnuFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnuFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/camera.png"))); // NOI18N
        mnuFind.setText("Найти");
        mnuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFindActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFind);

        mnuInform.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        mnuInform.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/info.png"))); // NOI18N
        mnuInform.setText("Информация");
        mnuInform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInformActionPerformed(evt);
            }
        });
        jMenu1.add(mnuInform);

        mnuObject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuObject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/objects.png"))); // NOI18N
        mnuObject.setText("Объекты");
        mnuObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuObjectActionPerformed(evt);
            }
        });
        jMenu1.add(mnuObject);

        mnuAct.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuAct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/CommentHS.png"))); // NOI18N
        mnuAct.setText("Акт");
        mnuAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuActActionPerformed(evt);
            }
        });
        jMenu1.add(mnuAct);

        jMenu3.setText("Уведомления");
        jMenu1.add(jMenu3);

        mnuAppendix.setText("Приложения");

        mnuAppendixItem1.setText("приложение №1");
        mnuAppendixItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppendixItem1ActionPerformed(evt);
            }
        });
        mnuAppendix.add(mnuAppendixItem1);

        mnuAppendixItem2.setText("приложение №2");
        mnuAppendixItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppendixItem2ActionPerformed(evt);
            }
        });
        mnuAppendix.add(mnuAppendixItem2);

        mnuAppendixItem3.setText("приложение №3");
        mnuAppendixItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppendixItem3ActionPerformed(evt);
            }
        });
        mnuAppendix.add(mnuAppendixItem3);

        mnuAppendixItem4.setText("приложение №4");
        mnuAppendixItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppendixItem4ActionPerformed(evt);
            }
        });
        mnuAppendix.add(mnuAppendixItem4);

        jMenu1.add(mnuAppendix);
        jMenu1.add(jSeparator1);

        mnuExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/exit.png"))); // NOI18N
        mnuExit.setText("Выйти");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        mnuRecord.setText("Запись");

        mnuRecAdd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuRecAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/NewDocumentHS.png"))); // NOI18N
        mnuRecAdd.setText("Добавить");
        mnuRecord.add(mnuRecAdd);

        mnuRecDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuRecDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/DeleteHS.png"))); // NOI18N
        mnuRecDelete.setText("Удалить");
        mnuRecord.add(mnuRecDelete);

        mnuRecSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/saveHS.png"))); // NOI18N
        mnuRecSave.setText("Сохранить");
        mnuRecord.add(mnuRecSave);
        mnuRecord.add(jSeparator2);

        mnuRecFilter.setText("Фильтр");
        mnuRecord.add(mnuRecFilter);

        jMenuBar1.add(mnuRecord);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(60, 60, 60)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDogovor, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPreviouse, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(61, 61, 61)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtEGRUL, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(chkStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtUstav, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5))
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDogovor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUstav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtEGRUL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chkStamp))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPreviouse)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnNext, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnLast, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFirst))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            // задаём свойства элементов управления
            txtID.setName("Код");
            txtCompanyName.setName("Наименование");
            txtDirector.setName("Руководитель");
            txtDogovor.setName("Договор");
            txtDate.setName("Дата");
            txtEGRUL.setName("КодЕГРПОУ");
            txtUstav.setName("Устав");
            chkStamp.setName("Печать");
            txtCategory.setName("КодКатегория");
            // заполняем список категорий
            addListboxItem();
            
            // заполняем меню Фильтр
            addMenuFilterItem();
            
            // действия для пунктов меню добавления, удаления, сохранения записи
            mnuRecAdd.addActionListener(new RecordAction());
            mnuRecDelete.addActionListener(new RecordAction());
            mnuRecSave.addActionListener(new RecordAction());

            // создаём источник данных
            Company = new CompanyList(0);// получаем данные по всем категориям

            // увязываем его с элементами управления
            if(Company.getRowCount() > 0){
                // если в наборе содержатся данные
                btnFirst.addActionListener(new MoveAction("MoveFirst"));
                btnPreviouse.addActionListener(new MoveAction("MovePreviouse"));
                btnNext.addActionListener(new MoveAction("MoveNext"));
                btnLast.addActionListener(new MoveAction("MoveLast"));
                btnFirst.doClick();// перемещаемся на первую запись в наборе

                // проверяем установку свойства idCompany
                if(idCompany != 0)
                    // выполняем поиск
                    findCompany(idCompany);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_formComponentShown

    private void mnuInformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInformActionPerformed
        try {
            // изменяем вид курсора
            parentFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            // отображаем форму с информацией о потребителе
            if(frminform == null){
                frminform = new InformFrame();
                frminform.setName("Информация");
                frminform.setTitle("Информация");
                
                frminform.setIdCompany(Organization.getId());
//                frminform.setVisible(true);
                frminform.addInternalFrameListener(new InternalFrameAdapter() {

                    @Override
                    public void internalFrameOpened(InternalFrameEvent e) {
                        super.internalFrameOpened(e);
                    }

                    @Override
                    public void internalFrameClosed(InternalFrameEvent e) {
                        super.internalFrameClosed(e); //To change body of generated methods, choose Tools | Templates.
                        frminform = null;
                    }
                    
                    

                });
                parentFrame.addInternalFrame(frminform);
                frminform.setMaximum(true);
            } else {
                frminform.setIdCompany(Organization.getId());
                frminform.setVisible(true);
            }
            // восстанавливаем вид курсора
            parentFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            
            
        } catch (PropertyVetoException ex) {
            // восстанавливаем вид курсора
            parentFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuInformActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        // закрываем форму
        setVisible(false);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuObjectActionPerformed
        // отображаем окно с информацией по объетам потребителя
        try {
            // изменяем вид курсора
            parentFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            // отображаем форму с информацией о потребителе
            if(frmobject == null){
                frmobject = new ObjectFrame();
                frmobject.setName("Объекты");
                frmobject.setTitle("Объекты");
                frmobject.setIdCompany(Organization.getId());// получаем информацию по объектам
//                frminform.setVisible(true);
                frmobject.addInternalFrameListener(new InternalFrameAdapter() {

                    @Override
                    public void internalFrameOpened(InternalFrameEvent e) {
                        super.internalFrameOpened(e);
                    }

                    @Override
                    public void internalFrameClosed(InternalFrameEvent e) {
                        super.internalFrameClosed(e); //To change body of generated methods, choose Tools | Templates.
                        frmobject = null;
                    }

                    
                });
                parentFrame.addInternalFrame(frmobject);
                // отображаем форму в развёрнутом виде
                frmobject.setMaximum(true);
                
                
            } else {
                frmobject.setIdCompany(Organization.getId());
                frmobject.setVisible(true);
            }
            // восстанавливаем вид курсора
            parentFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    //                frminform.setConnect(parentFrame.getConnect());
            
            
        } catch (PropertyVetoException ex) {
            // восстанавливаем вид курсора
            parentFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuObjectActionPerformed

    private void txtCompanyNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyNameFocusGained
        // запоминаем значение в поле ввода
        oldValue = txtCompanyName.getText();
        // выделяем текст в поле
        setSelectedTextArea(txtCompanyName);
    }//GEN-LAST:event_txtCompanyNameFocusGained

    private void txtCompanyNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyNameFocusLost
        // сравниваем новое значение поля со страрым
        if(!oldValue.equals(txtCompanyName.getText())){
            try {
                Organization.setOrganizationName(txtCompanyName.getText());
                // запрос к пользователю о внесении изменений в историю
                if(JOptionPane.showConfirmDialog(null, 
                        "Сохранить изменения в истории?", "AbonentGaz", 
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                    // если пользователь выбирает Да, заносим новое название в историю
                    // создаём объект для выполнения запроса на добавление новой записи
                    runqueries.Runquery rq = new Runquery("ORGHISTORY");
                    
                    // массив параметров запроса
                    Object[] param = new Object[]{Organization.getId(),
                        "Смена наименования",Organization.getOrganizationName()};
                    
                    // типы данных параметров запроса
                    Class[] classValue = new Class[]{Integer.class,String.class,String.class};
                    // имена полей в таблице для добавления записи
                    String fieldName = "IDORGANIZATION,NAMEVALUE,NAMING";
                    boolean retval = rq.addEntity(fieldName, "?,?,?", classValue, param);// получаем результат выполнения команды
                    if(retval){
                        MDIObject.getInformDialog(null, "Сохранение...", InformDialog.InformType.SAVING);
                    }
                }
            } catch (HeadlessException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtCompanyNameFocusLost

    private void txtDirectorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirectorFocusGained
        // запоминаем значение в поле ввода
        oldValue = txtDirector.getText();
        setSelectedTextArea(txtDirector);
    }//GEN-LAST:event_txtDirectorFocusGained

    private void txtDirectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirectorFocusLost
        // сравниваем новое значение поля со страрым
        if(!oldValue.equals(txtDirector.getText())){
            try {
                Organization.setDirector(txtDirector.getText());
//                updateDataSource(txtDirector.getText(), txtDirector.getName(), 2);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtDirectorFocusLost

    private void txtDogovorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDogovorFocusGained
        // запоминаем значение в поле ввода
        oldValue = txtDogovor.getText();
        setSelectedTextField(txtDogovor);
    }//GEN-LAST:event_txtDogovorFocusGained

    private void txtDogovorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDogovorFocusLost
        // сравниваем новое значение поля со страрым
        if(!oldValue.equals(txtDogovor.getText())){
            try {
                Organization.setAgriment(txtDogovor.getText());
                //updateDataSource(txtDogovor.getText(), txtDogovor.getName(), 3);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtDogovorFocusLost

    private void txtDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDateFocusGained
        // запоминаем значение в поле ввода
        oldValue = txtDate.getText();
        setSelectedTextField(txtDate);
    }//GEN-LAST:event_txtDateFocusGained

    private void txtDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDateFocusLost
        // сравниваем новое значение поля со страрым
        if(!oldValue.equals(txtDate.getText())){
            try {
                // проверяем, содержится ли в поле ввода данные
                String value;
                if(!txtDate.getText().equals("") || txtDate.getText() == null){
                    value = txtDate.getText();
                } else {
                    value = oldValue;
                }
//                System.out.println("date=" + date);
                Organization.setAgrimentdate(value);
//                updateDataSource(txtDate.getText(), txtDate.getName(), 4);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtDateFocusLost

    private void txtUstavFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUstavFocusGained
        // запоминаем значение в поле ввода
        oldValue = txtUstav.getText();
        setSelectedTextField(txtUstav);
    }//GEN-LAST:event_txtUstavFocusGained

    private void txtUstavFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUstavFocusLost
        // сравниваем новое значение поля со страрым
        if(!oldValue.equals(txtUstav.getText())){
            try {
                Organization.setUstav(txtUstav.getText());
                //updateDataSource(txtUstav.getText(), txtUstav.getName(), 6);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtUstavFocusLost

    private void txtEGRULFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEGRULFocusGained
        // запоминаем значение в поле ввода
        oldValue = txtEGRUL.getText();
        setSelectedTextField(txtEGRUL);
    }//GEN-LAST:event_txtEGRULFocusGained

    private void txtEGRULFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEGRULFocusLost
        // сравниваем новое значение поля со страрым
        if(!oldValue.equals(txtEGRUL.getText())){
            try {
                Organization.setEdrpou(txtEGRUL.getText());
                //updateDataSource(txtEGRUL.getText(), txtEGRUL.getName(), 5);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtEGRULFocusLost

    private void chkStampFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkStampFocusGained
        // запоминаем значение в поле ввода
//        oldValue = chkStamp.isSelected() ? "1" : "0";
    }//GEN-LAST:event_chkStampFocusGained

    private void chkStampFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkStampFocusLost
        // сравниваем новое значение поля со страрым
//        String newValue = chkStamp.isSelected() ? "1" : "0";
//        if(!oldValue.equals(newValue)){
//            try {
//                updateDataSource(newValue, chkStamp.getName(), 7);
//            } catch (SQLException ex) {
//                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }//GEN-LAST:event_chkStampFocusLost

    private void chkStampStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkStampStateChanged
        // TODO add your handling code here:
//        chkStamp.getSize();
    }//GEN-LAST:event_chkStampStateChanged

    private void chkStampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkStampActionPerformed
//        String newValue = chkStamp.isSelected() ? "1" : "0";
        try {
            Organization.setStamp(chkStamp.isSelected());
//            updateDataSource(newValue, chkStamp.getName(), 7);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chkStampActionPerformed

    private void btnCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCategoryActionPerformed
        // задаём видимость списка категорий
        lstPane.setVisible(!lstPane.isVisible());
        
        if(lstPane.isVisible() == true)
            // если список выдин, устанавливаем на нем фокус
            lstCategory.setFocusable(true);
    }//GEN-LAST:event_btnCategoryActionPerformed

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        // при перемещении формы записываем новое местоположение в файл свойств
        if(flManager != null){
            try {
                flManager.getFrameLocation(this);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formComponentMoved

    private void txtIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIDFocusGained
        // TODO add your handling code here:
        setSelectedTextField(txtID);
    }//GEN-LAST:event_txtIDFocusGained

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // при закрытии формы закрываем и другие зависимые от неё формы
        if(frminform != null) frminform.setVisible(false);
        if(frmobject != null) frmobject.setVisible(false);
        if(frmAct != null) frmAct.setVisible(false);
    }//GEN-LAST:event_formComponentHidden

    private void mnuActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuActActionPerformed
        // TODO add your handling code here:
        frmAct = new ActFrame();
        
        // добавляем слушателя события закрытия формы
        frmAct.addWindowListener(new WindowAdapter() {

            @Override
            public void windowOpened(WindowEvent e) {
                super.windowOpened(e);
                // при открытии формы блокируем пункт меню Акт
                mnuAct.setEnabled(false);
            }

            @Override
            public void windowClosed(WindowEvent e) {
                super.windowClosed(e);
                // при закрытии формы обнуляем переменную и разблокируем пункт меню Акт
                mnuAct.setEnabled(true);
                frmAct = null;
            }

        });
        
        frmAct.setIdCompany(Organization.getId());
        frmAct.setDirector(Organization.getDirector());
        frmAct.setNameOrganization(Organization.getOrganizationName());
        frmAct.setAgreement(Organization.getAgriment() + " от " + Organization.getAgrimentdate());
        frmAct.setAlwaysOnTop(true);
        frmAct.setVisible(true);

        
    }//GEN-LAST:event_mnuActActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void mnuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFindActionPerformed
        // показываем окно поиска
        parentFrame.showFindFrame();
    }//GEN-LAST:event_mnuFindActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // показываем окно поиска
        parentFrame.showFindFrame();
    }//GEN-LAST:event_findButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // добавляем новую запись
        addNewRecord();
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // удаление записи
        deleteRecord();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // сохранение изменений в записи
        saveRecord();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void mnuAppendixItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppendixItem1ActionPerformed
        // показываем форму с приложением №1
        showAppendixFrame(AppendixFrame.AppendixType.UUGType, mnuAppendixItem1);
    }//GEN-LAST:event_mnuAppendixItem1ActionPerformed

    private void mnuAppendixItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppendixItem2ActionPerformed
        // показываем форму с приложением №2
        showAppendixFrame(AppendixFrame.AppendixType.LimitType, mnuAppendixItem2);
    }//GEN-LAST:event_mnuAppendixItem2ActionPerformed

    private void mnuAppendixItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppendixItem3ActionPerformed
        // показываем форму с приложением №3
        showAppendixFrame(AppendixFrame.AppendixType.LoseType, mnuAppendixItem3);
    }//GEN-LAST:event_mnuAppendixItem3ActionPerformed

    private void mnuAppendixItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppendixItem4ActionPerformed
        // показываем форму с приложением №4
        showAppendixFrame(AppendixFrame.AppendixType.JournalType, mnuAppendixItem4);
    }//GEN-LAST:event_mnuAppendixItem4ActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here
        // закрываем форму
        setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void btnPreviouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPreviouseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | 
                IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton btnCategory;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPreviouse;
    private javax.swing.JCheckBox chkStamp;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exitButton;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblRecord;
    private javax.swing.JMenuItem mnuAct;
    private javax.swing.JMenu mnuAppendix;
    private javax.swing.JMenuItem mnuAppendixItem1;
    private javax.swing.JMenuItem mnuAppendixItem2;
    private javax.swing.JMenuItem mnuAppendixItem3;
    private javax.swing.JMenuItem mnuAppendixItem4;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuFind;
    private javax.swing.JMenuItem mnuInform;
    private javax.swing.JMenuItem mnuObject;
    private javax.swing.JMenuItem mnuRecAdd;
    private javax.swing.JMenuItem mnuRecDelete;
    private javax.swing.JMenu mnuRecFilter;
    private javax.swing.JMenuItem mnuRecSave;
    private javax.swing.JMenu mnuRecord;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextArea txtCompanyName;
    private javax.swing.JFormattedTextField txtDate;
    private javax.swing.JTextArea txtDirector;
    private javax.swing.JTextField txtDogovor;
    private javax.swing.JTextField txtEGRUL;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtUstav;
    // End of variables declaration//GEN-END:variables

    /**
     * @param parentFrame the parentFrame to set
     */
    public void setParentFrame(MDIObject parentFrame) {
        this.parentFrame = parentFrame;
    }
    
    /**
     * @param idCompany the idCompany to set
     */
    public void setIdCompany(int idCompany) {
        this.idCompany = idCompany;
    }
    
    class MoveAction extends AbstractAction{
        public MoveAction(String name){
            super(name);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()){
                case "MoveFirst":
                    Company.moveFirst();
                    break;
                case "MovePreviouse":
                    Company.movePreviouse();
                    break;
                case "MoveNext":
                    Company.moveNext();
                    break;
                case "MoveLast":
                    Company.moveLast();
                    break;
            }
//            Company.getCellValueAt();
//            Organization.setId(Company.getCellValueAt());
            showData();// отображаем данные
            setButtonEnabled();// устанавливаем доступность кнопок перемещения
        }
        
    }
    
    /**
     * отображает данные из набора
     */
    private void showData(){
        // показываем номер записи в наборе
        lblRecord.setText("Запись " + Company.getPosition() + " / " + 
                Company.getRowCount());
        
        // показываем информацию об организации
        showInformation();
//        System.out.println("chkStamp.setSelected=" + Company.getCellValueAt(7).toString());
    }
    
    /**
     * устанавливаем доступность кнопок перемещения по набору
     */
    private void setButtonEnabled(){
        btnFirst.setEnabled(true);
        btnPreviouse.setEnabled(true);
        btnNext.setEnabled(true);
        btnLast.setEnabled(true);
        
        if(Company.isBOF() == true){
            // достигнуто начало набора
            btnFirst.setEnabled(false);
            btnPreviouse.setEnabled(false);
            btnNext.setEnabled(true);
            btnLast.setEnabled(true);
        }
        if(Company.isEOF() == true){
            // достигнуто начало набора
            btnFirst.setEnabled(true);
            btnPreviouse.setEnabled(true);
            btnNext.setEnabled(false);
            btnLast.setEnabled(false);
        }
    }
    
    /**
     * заполнение списка данными и определение действий для элементов списка
     */
    private void addListboxItem() throws SQLException{
        final SprcategoryDaoImpl categoryDao = new SprcategoryDaoImpl();
        categoryDao.getEntities();// получаем данные по категориям
        
        // модель данных для списка
        DefaultListModel<String> dlm = new DefaultListModel<>();
//        idList = new ArrayList();// массив для хранения значений ключевого столбца
//        nameList = new ArrayList();// массив для хранения наименований
//        ResultSet cmbRS = parentFrame.getConnect().ExecuteQuery(sqlString);
        // заполняем список результатами набора
        for(int i = 0; i < categoryDao.getCount(); i++){
            TableEntity category = categoryDao.getItem(i);
            Object[] toDataArray = category.toDataArray();
            dlm.addElement(toDataArray[1].toString());
        }
//        while(cmbRS.next()){
//            dlm.addElement(cmbRS.getString("Наименование"));
//            idList.add(cmbRS.getString("Код"));
//            nameList.add(cmbRS.getString("Наименование"));
//        }
        lstCategory = new JList(dlm);
        lstPane = new JScrollPane(lstCategory, 
                ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, 
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);// добавляем список на панель прокрутки
        
        lstPane.setVisible(false);// устанавливаем его невидимость
//        System.out.println("getX = " + txtCategory.getLocation().getX());
        lstPane.setLocation(txtCategory.getLocation().x, 
                txtCategory.getLocation().y + 
                (int)txtCategory.getHeight() + 2);
        Dimension d = new Dimension(txtCategory.getWidth(), 
                txtCategory.getHeight()*5);
        lstPane.setSize(d);
        lstPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lstCategory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        // добавляем обработчик событий
        lstCategory.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                try {
                    TableEntity entity = (TableEntity) categoryDao.getItem(lstCategory.getSelectedIndex());
                    Organization.setIdcategory(entity.getId());
                    txtCategory.setText(lstCategory.getSelectedValue().toString());
                    lstPane.setVisible(false);
                    btnCategory.setFocusable(true);// устанавливаем фокус на кнопке выбора категорий
//                    System.out.println(idList.get(lstCategory.getSelectedIndex()));
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        getContentPane().add(lstPane);
        getContentPane().setComponentZOrder(lstPane, 0);
    }
    
    /**
     * заполнение меню Фильтр
     */
    private void addMenuFilterItem(){
        // создаём объект доступа к данным по категории
        SprcategoryDaoImpl categoryDao = new SprcategoryDaoImpl();
        
        for(int i = 0; i < categoryDao.getCount(); i++){
            // пункт меню
            JCheckBoxMenuItem mnuFilterItem = new JCheckBoxMenuItem();
            mnuFilterItem.setActionCommand(String.valueOf(categoryDao.getItem(i).getId()));
            mnuFilterItem.setText(categoryDao.getItem(i).getCategoryName());
            mnuFilterItem.addActionListener(new FilterMenuAction());
            mnuRecFilter.add(mnuFilterItem);
        }
        // добавляем разделитель пунктов меню
        JSeparator separator = new JSeparator();
        mnuRecFilter.add(separator);
        // последний пункт меню Фильтр - удалить фильтр
        JCheckBoxMenuItem mnuFilterDelete = new JCheckBoxMenuItem();
        mnuFilterDelete.setActionCommand("0");
        mnuFilterDelete.setText("удалить фильтр");
        mnuFilterDelete.addActionListener(new FilterMenuAction());
        mnuRecFilter.add(mnuFilterDelete);
    }
    
    /**
     * Показывает форму с выбранным типом приложения
     */
    private void showAppendixFrame(AppendixFrame.AppendixType appType, final JMenuItem mnuItem){
        AppendixFrame frame = new AppendixFrame();// создаём форму
        frame.setAppendixType(appType);// задаём тип приложения
        // переопределяем действие формы при закрытии
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                super.windowClosing(we); //To change body of generated methods, choose Tools | Templates.
                // разблокируем соответствующий пункт меню Приложений
                mnuItem.setEnabled(true);
            }
            
        });
        // блокируем соответствующий пункт меню
        mnuItem.setEnabled(false);
        frame.setVisible(true);// показываем форму
    }
    
    /**
     * отображает информацию о выбранной организации
     */
    private void showInformation(){
        // изменяем вид курсора
        parentFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        
        // проверяем, отображена ли форма с информацией
        // если да, то показываем информацию
        // если нет, игнорируем вывод
        if(frminform != null) {
            int id = Organization.getId();
            frminform.setIdCompany(id);
        }
        if(frmobject != null) {
            int id = Organization.getId();
            frmobject.setIdCompany(id);
        }
        if(frmAct != null){
            int id = Organization.getId();
            frmAct.setIdCompany(id);
            frmAct.setDirector(Organization.getDirector());
            frmAct.setNameOrganization(Organization.getOrganizationName());
            frmAct.setAgreement(Organization.getAgriment() + " от " + Organization.getAgrimentdate());
        }
        // восстанавливаем вид курсора
        parentFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }
    
    class FilterMenuAction extends AbstractAction{
        
        public FilterMenuAction(){
            super();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                Company.setFilterValue(Integer.parseInt(e.getActionCommand()));
                Company.getCellValueAt();
                showData();
                setButtonEnabled();
                
                for(int i = 0; i < mnuRecFilter.getItemCount() - 2; i++){
                    // снимаем отметку со всех пунктов, обходя последние 2 пункта
//                    System.out.println("i=" + i);
                    mnuRecFilter.getItem(i).setSelected(false);
                }
                
                // отмечаем выбранный пункт
                if(Integer.parseInt(e.getActionCommand()) > 0 && 
                        Integer.parseInt(e.getActionCommand()) <= 7)
                mnuRecFilter.getItem(Integer.parseInt(e.getActionCommand()) 
                        - 1).setSelected(true);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }
    
    class RecordAction extends AbstractAction{
        public RecordAction(){
            super();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            // в зависимости от типа команды определяем тип запроса на добавление
            // или удаление записи, а также текст уведомления при ошибке
            switch (e.getActionCommand()) {
                case "Добавить":
                    addNewRecord();
                    break;
                case "Удалить":
                    deleteRecord();
                    break;
                case "Сохранить":
                    // сохранение записи
                    saveRecord();
                    break;
                default:    
                    break;
            }
        }
    }
    
    private void addNewRecord(){
        int button = JOptionPane.showConfirmDialog(parentFrame, 
                "Добавить новую запись?", "AbonentGaz", 
                JOptionPane.YES_NO_OPTION);
        // если выбрано Да
        if(button == JOptionPane.YES_OPTION){
            boolean i = Company.addRecord();
            // обновляем данные в наборе
            if(i == true) {
                // операция прошла удачно
                Company.updateDataItem();
                Company.getCellValueAt();
                showData();// отображаем данные
                setButtonEnabled();// устанавливаем доступность кнопок перемещения
            } else {
                JOptionPane.showConfirmDialog(parentFrame, 
                        "Произошли ошибки при добавлении записи. "
                        + "Обратитесь к разработчику!", "AbonentGaz", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void deleteRecord(){
        int button = JOptionPane.showConfirmDialog(parentFrame, 
                "Удалить запись?", "AbonentGaz", 
                JOptionPane.YES_NO_OPTION);
        // если выбрано Да
        if(button == JOptionPane.YES_OPTION){
            boolean i = Company.deleteRecord();
            // обновляем данные в наборе
            if(i == true) {
                // операция прошла удачно
                Company.updateDataItem();
                Company.getCellValueAt();
                showData();// отображаем данные
                setButtonEnabled();// устанавливаем доступность кнопок перемещения
            } else {
                JOptionPane.showConfirmDialog(parentFrame, 
                        "Произошли ошибки при удалении записи. "
                        + "Обратитесь к разработчику!", "AbonentGaz", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void saveRecord(){
        Company.saveRecord();// сохраняем внесённые изменения
    }
    
    private void setSelectedTextArea(JTextArea txtArea){
        // выделяем текст в поле
        txtArea.setSelectionStart(0);
        txtArea.setSelectionEnd(txtArea.getText().length());
    }
    
    private void setSelectedTextField(JTextField txtField){
        // выделяем текст в поле
        txtField.setSelectionStart(0);
        txtField.setSelectionEnd(txtField.getText().length());
    }
    
    public void findCompany(int id){
        if(Company.findItem(id) == true){
            // переходим к найденной записи
//            System.out.println("запись найдена");
            Company.getCellValueAt();
            showData();// отображаем данные
            setButtonEnabled();// устанавливаем доступность кнопок перемещения
        } else
            JOptionPane.showMessageDialog(MainFrame.this, "Искомая запись не найдена!", "AbonentGaz", 
                    JOptionPane.INFORMATION_MESSAGE);
    }
    
    class CompanyList{
        
        private int rowIndex;// номер строки в наборе
        private boolean EOF;// флаг конца набора
        private boolean BOF;// флаг начала набора
        private int position;// позиция (номер) записи в наборе
        private short idOperate = 0;// код проводимой операции с набором
        // 0 - редактирование/изменение существующего набора записей, 1 - добавление новой
        // записи, 2 - удаление текущей записи
        private OrganizationDaoImpl ODI;
        private int recCount;// количество записей
        private int idCategory;
        /**
         * представляет данные Организаций выбранной категории
         * @param idCategory код выбранной категории отбора (0 - категория не задана)
         * @throws SQLException 
         */
        public CompanyList(int idCategory){
            this.idCategory = idCategory;
            ODI = new OrganizationDaoImpl(idCategory);
            ODI.getEntities();// получаем данные по выбранной категории
            recCount = ODI.getCount();
//            sqlQuery = "SELECT Код, КодКатегория FROM Перечень ORDER By Код ASC;";
//            
//            refreshData(sqlQuery);// получаем данные набора
        }

        /**
         * @return the EOF
         */
        public boolean isEOF() {
            return EOF;
        }

        /**
         * @return the BOF
         */
        public boolean isBOF() {
            return BOF;
        }

        /**
         * @return the position
         */
        public int getPosition() {
            position = rowIndex + 1;
            return position;
        }

        /**
         * @param position the position to set
         */
        public void setPosition(int position) {
            this.position = position;
            rowIndex = position - 1;
            movePosition();
        }
    
        /**
        * @return количество записей (строк) в наборе
        */
        public int getRowCount() {
            return recCount;
        }
        
        /**
         * перемещение на первую запись в наборе
         */
        public void moveFirst() {
            rowIndex = 0;// начало набора
            BOF = true;// устанавливаем флаг начала набора
            EOF = false;// снимаем флаг конца набора
            getCellValueAt();
        }

        /**
         * перемещение на предыдущую запись в наборе
         */
        public void movePreviouse() {
        rowIndex--;// уменьшаем индекс на 1
            EOF = false;// снимаем флаг конца набора
            if(rowIndex <= 0){
                rowIndex = 0;
                BOF = true;// устанавливаем флаг начала набора
            } else{
                BOF = false;// устанавливаем флаг начала набора
            }
            getCellValueAt();
        }

        /**
         * перемещение на слудующую запись в наборе
         */
        public void moveNext() {
            BOF = false;// снимаем флаг начала набора
            rowIndex++;// увеличиваем индекс на 1
            if(rowIndex >= recCount - 1){
                rowIndex = recCount - 1;
                EOF = true;// устанавливаем флаг конца набора
            } else{
                EOF = false;// снимаем флаг конца набора
            }
            getCellValueAt();
        }

        /**
         * перемещение на последнюю запись в наборе
         */
        public void moveLast() {
            rowIndex = recCount - 1;// конец набора
            BOF = false;// снимаем флаг начала набора
            EOF = true;// устанавливаем флаг конца набора
            getCellValueAt();
        }

        /**
         * перемещение на произвольную запись в набое
         */
        private void movePosition(){
//            System.out.println("rowindex=" + rowIndex + ", BOF=" + BOF + ", EOF=" + EOF);
            BOF = false;// снимаем флаг начала набора
            EOF = false;// снимаем флаг конца набора
            if(rowIndex == 0)
                BOF = true;// устанавливаем флаг начала набора
            
            if(rowIndex == recCount - 1)
                EOF = true;// устанавливаем флаг конца набора
            getCellValueAt();
        }
        
        /**
         * 
         */
        public void updateDataItem() {
            try {
                refreshData();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        /**
         * добавляет новую запись в набор данных
         * @return true - в случае успеха, в противном случае возвращает false
         */
        public boolean addRecord(){
            idOperate = 1;// выполняется операция добавления новой записи
            String fieldname = "IDCATEGORY";// имена полей для добавления
            String escfield = "?";// последовательность символов-заменителей
            
            // проверяем код заданной категории отбора записей, если он
            // равен 0, тогда получаем код первой категории из справочника,
            // иначе используем код категории, по которому были отобраны записи
            int[] parameters = new int[1];
            if(idCategory == 0){
                SprcategoryDaoImpl categoryDao = new SprcategoryDaoImpl();
                parameters[0] = categoryDao.getItem(0).getId();
            } else {
                parameters[0] = idCategory;
            }
            boolean retval = ODI.addItem(fieldname, escfield, parameters);
            return retval;
        }
        
        /**
         * удаляет текщую запись из набора данных
         * @return true - в случае успеха, в противном случае возвращает false
         */
        public boolean deleteRecord(){
            idOperate = 2;// выполняется операция удаления текущей записи
            
            return ODI.deleteItem(rowIndex);// возвращаем результат операции удаления
//            return false;
        }
        
        /**
         * сохраняет изменения в базе данных
         */
        public void saveRecord(){
            Organization organization = ODI.getItem(rowIndex);// получаем сущность
            organization.setOrganizationName(txtCompanyName.getText());
            organization.setDirector(txtDirector.getText());
            organization.setAgriment(txtDogovor.getText());
            organization.setAgrimentdate(txtDate.getText());
            organization.setUstav(txtUstav.getText());
            organization.setEdrpou(txtEGRUL.getText());
            organization.setStamp(chkStamp.isSelected());
            
        }
        
        /**
        * получение данных набора
        */
        private void refreshData() throws SQLException{
            ODI = new OrganizationDaoImpl(idCategory);
            ODI.getEntities();// получаем данные по выбранной категории
            recCount = ODI.getCount();
            
            // проверяем код выполняемой операции
            switch(idOperate){
                case 0:
                    // изменение данных набора
                    moveFirst();// переход к первой записи
                    break;
                case 1:
                    // добавление новой записи - перемещаемся в конец набора данных
                    moveLast();
                    break;
                case 2:
                    // удаление текущей записи - перемещаемся в начало набора данных
                    moveFirst();// переход к первой записи
                    break;
            }
            idOperate = 0;// сбрасываем код операции
        }
        
        /**
        * 
        * @return экземпляр Организации по его текущему индексу
        */
        private void getCellValueAt() {
            Organization = ODI.getItem(rowIndex);
            
            // отображаем данные в элементах управления
            txtID.setText(Integer.toString(Organization.getId()));
            txtCompanyName.setText(Organization.getOrganizationName());
            txtDirector.setText(Organization.getDirector());
            txtDogovor.setText(Organization.getAgriment());
            txtDate.setText(Organization.getAgrimentdate());
            txtEGRUL.setText(Organization.getEdrpou());
            txtUstav.setText(Organization.getUstav());
            chkStamp.setSelected(Organization.getStamp());
            txtCategory.setText(Organization.getCategoryName());
            
        }
        
        /**
        * @param filterValue the filterValue to set
        */
        public void setFilterValue(int filterValue) throws SQLException {
            // проверяем полученное значение фильтра
            idCategory = filterValue;
            refreshData();
        }
        
        /**
         * осуществляет поиск организации по заданному коду
         * @param id идентификационный код организации для поиска
         * @return true в случае успеха, в противном случае возвращает false
         */
        public boolean findItem(int id){
            boolean retval = false;// начальное значение процедуры поиска (не найдено)
            int Index = rowIndex;
//            System.out.println("id=" + id + " getId=" + Organization.getId());
            // определяем область поиска
            if(id <= Organization.getId()){
                
                for(int i = Index; i >= 0; i--){
                    if(ODI.getItem(i).getId() == id){
                        // если код экземпляра совпадает, запоминаем его позицию
                        rowIndex = i;

                        movePosition();
                        // устанавливаем флаг поиска в true
                        retval = true;

                        // выходим из цикла поиска
                        break;
                    }
                }
            } else {
                for(int i = Index; i < ODI.getCount(); i++){
    //                System.out.println("getID=" + ODI.getItem(i).getId());
                    if(ODI.getItem(i).getId() == id){
                        // если код экземпляра совпадает, запоминаем его позицию
                        rowIndex = i;
                        movePosition();

                        // устанавливаем флаг поиска в true
                        retval = true;

                        // выходим из цикла поиска
                        break;
                    }
                }
            }
            return retval;
        }
    

    }
    
    
}
